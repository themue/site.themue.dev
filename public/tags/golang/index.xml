<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Embrace Change, Shape the Future</title>
    <link>//localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on Embrace Change, Shape the Future</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 May 2023 20:00:00 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAX 2023</title>
      <link>//localhost:1313/posts/2023/05/13/jax-2023/</link>
      <pubDate>Sat, 13 May 2023 20:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2023/05/13/jax-2023/</guid>
      <description>This week in Mainz was JAX 2023 again, organized by Software &amp;amp; Support. It was nice, because slowly the conferences are getting more full, more real again. JAX was also hybrid and the organizers put a lot of effort into streaming all workshops and talks in parallel and connecting visitors at home via chat. But it&amp;rsquo;s not the same as on-site, sharing, discussing, laughing, eating and drinking.&#xA;As I said, the conference consisted of workshops on Monday and Friday, and three days of keynotes, talks and panel discussions from Tuesday through Thursday.</description>
    </item>
    <item>
      <title>Tideland Go Actor v0.3.0</title>
      <link>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</link>
      <pubDate>Sun, 09 Apr 2023 15:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</guid>
      <description>I&amp;rsquo;m happy to share with you some news about the new release v0.3.0 of the Tideland Go Actor. This new version comes with a handful of exciting updates and improvements that make it easier and more efficient to work with Actors in Go. One important change in this release is the addition of the Repeat() method. This new feature allows developers to run background Actions in intervals, making it easier to handle long-running tasks in the background.</description>
    </item>
    <item>
      <title>Tideland Go Slices v0.1.1</title>
      <link>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</link>
      <pubDate>Sat, 20 Aug 2022 21:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</guid>
      <description>So far I had not missed generics in Go. Much could be solved via interfaces or closures. And with the disgusting syntactic aberrations of other languages when dealing with generics, I was rather afraid that the elegant simplicity of Go could be lost. As of Go 1.18, Google&amp;rsquo;s language now handles generics after much discussion.&#xA;I have always appreciated the implicit simplicity with which, for example, types in a statement like</description>
    </item>
    <item>
      <title>Talk about declarative APIs</title>
      <link>//localhost:1313/posts/2022/05/06/talk-about-declarative-apis/</link>
      <pubDate>Fri, 06 May 2022 22:10:00 +0200</pubDate>
      <guid>//localhost:1313/posts/2022/05/06/talk-about-declarative-apis/</guid>
      <description>As you know, I from time to time have the chance to give a talk about an interesting topic. Sometimes it&amp;rsquo;s pretty close to my work, sometimes it&amp;rsquo;s just inspired by my own ideas. In this case it&amp;rsquo;s a mix.&#xA;The conference this time had been the betterCode() API on 27.04.2022. Here I had the talk &amp;ldquo;Let the computer do it - Usage of declarative APIs&amp;rdquo;. It describes the troubles of today usual imperative APIs and how to use them in a declarative way.</description>
    </item>
    <item>
      <title>Tideland Go Wait v0.2.0</title>
      <link>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</link>
      <pubDate>Sat, 05 Mar 2022 22:25:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</guid>
      <description>The package Tideland Go Wait reached v0.2.0 due to a new added feature. It now contains the type Throttle to provide a limited processing of events per second, e.g. for web handlers. The events are simple closures or functions with a given signature. The limit and a burst size for the maximum number of events during one call are defined at throttle creation.&#xA;Example A throttled wrapper of a http.Handler.</description>
    </item>
    <item>
      <title>Tideland Go Audit v0.6.5</title>
      <link>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</link>
      <pubDate>Tue, 01 Mar 2022 15:43:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</guid>
      <description>There are times when you find a bug in your software. Today it had been in my testing library TIdeland Go Audit. Here the assertion ErrorContains() reacted with a panic in case of a nil error. So I fixed it like I already had done it earlier in ErrorMatch(). Interestingly I found in testing that I didn&amp;rsquo;t verified it there. So this test is now changed too.&#xA;Additionally during tests for a different library with high concurrency I, or better go test during the tests, discovered a race condition.</description>
    </item>
    <item>
      <title>Migrated Go Actor and Go Wait</title>
      <link>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</link>
      <pubDate>Wed, 08 Sep 2021 21:11:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</guid>
      <description>As described a few days ago, I am migrating individual packages of the Tideland libraries to own repositories. Iâ€™ve described my motivation for this before. In the meantime, two more packages have been migrated to the main level: Tideland Go Actor and Tideland Go Wait.&#xA;The package Tideland Go Actor pursues the idea to realize concurrency in Go not only via CSP, but with the Actor Model. It picks up the concept of the Erlang/OTP module gen_server.</description>
    </item>
    <item>
      <title>Make it easier to find</title>
      <link>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</link>
      <pubDate>Sun, 29 Aug 2021 13:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</guid>
      <description>A look at the Tideland Go repositories shows that these today are libraries for individual topics with various packages included. One problem with this form of organization is that these packages are difficult to find. At the same time, their individual histories and their versions are tied to those of the entire library. This must be improved.&#xA;Therefore, the reconstruction of these projects has now begun. The packages from the repositories move to the main level and become independent projects.</description>
    </item>
    <item>
      <title>Tideland Go Audit v0.5.0</title>
      <link>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</link>
      <pubDate>Thu, 20 May 2021 22:25:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</guid>
      <description>I&amp;rsquo;ve mentioned before that I&amp;rsquo;m currently reorganize my Tideland Go Libraries - once again. I&amp;rsquo;m sorry for it and it will be interesting just for those who want to participate in development. The import into your own projects will stay the same.&#xA;This time it&amp;rsquo;s about the Tideland Go Audit library, I&amp;rsquo;ve just released the new v0.5.0. It&amp;rsquo;s a well approved and robust library containing helpful packages for testing. So the update only contains a few changes.</description>
    </item>
    <item>
      <title>Talks on GoDays 2020</title>
      <link>//localhost:1313/posts/2019/11/20/talks-on-godays-2020/</link>
      <pubDate>Wed, 20 Nov 2019 16:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/11/20/talks-on-godays-2020/</guid>
      <description>In January 21 to 23, 2020 are the next GoDays in Berlin, Germany. And I hope it will be a great conference for all Gophers again like it has been this year too.&#xA;While being a passive visitor last time I&amp;rsquo;ll be active with two slots this time:&#xA;First one will be a workshop from 9:00 am to 5:00 pm on 21st together with Nico Schieder and Indradhanush Gupta. We&amp;rsquo;ll introduce you in Kubernetes as platform for own components, because it can do more than deploy and manage containers.</description>
    </item>
    <item>
      <title>Happy Birthday, little Gopher</title>
      <link>//localhost:1313/posts/2019/11/10/happy-birthday-little-gopher/</link>
      <pubDate>Sun, 10 Nov 2019 19:30:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/11/10/happy-birthday-little-gopher/</guid>
      <description>Today we&amp;rsquo;re celebrating the birthday of our little gopher, Googles programming language Go turns 10. A decade of growing and getting better every year without breaking the promise of source code compatibility. So the community grew to about two million developers world wide and we can find a pretty large number of projects developed in Go. Especially many projects of the Cloud Native Computing Foundation are using Go for implementation, like Docker and Kubernetes, Etcd and Prometheus.</description>
    </item>
    <item>
      <title>Video of my JAX 2019 talk about Go</title>
      <link>//localhost:1313/posts/2019/08/29/video-of-my-jax-2019-talk-about-go/</link>
      <pubDate>Thu, 29 Aug 2019 22:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/08/29/video-of-my-jax-2019-talk-about-go/</guid>
      <description>The JAX conference typically focusses on Java technologies, the J of the name already shows it. But over the last years it opened more and more for other languages or external infrastructure technologies influencing the system architecture for solutions.&#xA;And so this year in May I had the chance to give an introduction into Google Go as an alternative programming language. The slides can be found at SlideShare as usual. But additionally the organizers recorded the one hour talk on video.</description>
    </item>
    <item>
      <title>Enjoy functions</title>
      <link>//localhost:1313/posts/2019/05/16/enjoy-functions/</link>
      <pubDate>Thu, 16 May 2019 23:01:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/05/16/enjoy-functions/</guid>
      <description>What shall be special when working with functions? They are part of software development almost since beginning, there&amp;rsquo;s even the paradigm of functional programming. So what&amp;rsquo;s special with functions in Go? Simple answer: nothing. But true to the motto of the language the work with functions and their relatives, the methods, is very pragmatic. And so they get parts of elegant solutions.&#xA;Let&amp;rsquo;s start with quite simple functions. They can be small, having none, one, more or a variable number of parameters.</description>
    </item>
    <item>
      <title>Donâ€™t be afraid of multiplexing</title>
      <link>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</link>
      <pubDate>Sat, 23 Mar 2019 22:50:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</guid>
      <description>Pretty often you read questions about multiplexing in Go web application on Slack, StackOverflow, or Reddit. Sometimes they think about using libraries like gorilla/mux, which is a powerful software, and its alternatives. Depending on individual requirements and constraints these may make sense, but for many cases the standard library or own little packages based on the standard library are more than enough. I&amp;rsquo;ll show the idea behind the Go net/http package and how to build own solutions based on it.</description>
    </item>
  </channel>
</rss>
