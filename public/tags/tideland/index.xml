<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tideland on Embrace Change, Shape the Future</title>
    <link>//localhost:1313/tags/tideland/</link>
    <description>Recent content in Tideland on Embrace Change, Shape the Future</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Apr 2023 15:00:00 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/tideland/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tideland Go Actor v0.3.0</title>
      <link>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</link>
      <pubDate>Sun, 09 Apr 2023 15:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</guid>
      <description>I&amp;rsquo;m happy to share with you some news about the new release v0.3.0 of the Tideland Go Actor. This new version comes with a handful of exciting updates and improvements that make it easier and more efficient to work with Actors in Go. One important change in this release is the addition of the Repeat() method. This new feature allows developers to run background Actions in intervals, making it easier to handle long-running tasks in the background.</description>
    </item>
    <item>
      <title>Tideland Go Slices v0.1.1</title>
      <link>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</link>
      <pubDate>Sat, 20 Aug 2022 21:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</guid>
      <description>So far I had not missed generics in Go. Much could be solved via interfaces or closures. And with the disgusting syntactic aberrations of other languages when dealing with generics, I was rather afraid that the elegant simplicity of Go could be lost. As of Go 1.18, Google&amp;rsquo;s language now handles generics after much discussion.&#xA;I have always appreciated the implicit simplicity with which, for example, types in a statement like</description>
    </item>
    <item>
      <title>Tideland Go Wait v0.2.0</title>
      <link>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</link>
      <pubDate>Sat, 05 Mar 2022 22:25:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</guid>
      <description>The package Tideland Go Wait reached v0.2.0 due to a new added feature. It now contains the type Throttle to provide a limited processing of events per second, e.g. for web handlers. The events are simple closures or functions with a given signature. The limit and a burst size for the maximum number of events during one call are defined at throttle creation.&#xA;Example A throttled wrapper of a http.Handler.</description>
    </item>
    <item>
      <title>Tideland Go Audit v0.6.5</title>
      <link>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</link>
      <pubDate>Tue, 01 Mar 2022 15:43:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</guid>
      <description>There are times when you find a bug in your software. Today it had been in my testing library TIdeland Go Audit. Here the assertion ErrorContains() reacted with a panic in case of a nil error. So I fixed it like I already had done it earlier in ErrorMatch(). Interestingly I found in testing that I didn&amp;rsquo;t verified it there. So this test is now changed too.&#xA;Additionally during tests for a different library with high concurrency I, or better go test during the tests, discovered a race condition.</description>
    </item>
    <item>
      <title>Migrated Go Actor and Go Wait</title>
      <link>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</link>
      <pubDate>Wed, 08 Sep 2021 21:11:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</guid>
      <description>As described a few days ago, I am migrating individual packages of the Tideland libraries to own repositories. Iâ€™ve described my motivation for this before. In the meantime, two more packages have been migrated to the main level: Tideland Go Actor and Tideland Go Wait.&#xA;The package Tideland Go Actor pursues the idea to realize concurrency in Go not only via CSP, but with the Actor Model. It picks up the concept of the Erlang/OTP module gen_server.</description>
    </item>
    <item>
      <title>Make it easier to find</title>
      <link>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</link>
      <pubDate>Sun, 29 Aug 2021 13:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</guid>
      <description>A look at the Tideland Go repositories shows that these today are libraries for individual topics with various packages included. One problem with this form of organization is that these packages are difficult to find. At the same time, their individual histories and their versions are tied to those of the entire library. This must be improved.&#xA;Therefore, the reconstruction of these projects has now begun. The packages from the repositories move to the main level and become independent projects.</description>
    </item>
    <item>
      <title>Tideland Go Audit v0.5.0</title>
      <link>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</link>
      <pubDate>Thu, 20 May 2021 22:25:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</guid>
      <description>I&amp;rsquo;ve mentioned before that I&amp;rsquo;m currently reorganize my Tideland Go Libraries - once again. I&amp;rsquo;m sorry for it and it will be interesting just for those who want to participate in development. The import into your own projects will stay the same.&#xA;This time it&amp;rsquo;s about the Tideland Go Audit library, I&amp;rsquo;ve just released the new v0.5.0. It&amp;rsquo;s a well approved and robust library containing helpful packages for testing. So the update only contains a few changes.</description>
    </item>
    <item>
      <title>Change of top level domain to dev</title>
      <link>//localhost:1313/posts/2019/03/02/change-of-top-level-domain-to-dev/</link>
      <pubDate>Sat, 02 Mar 2019 20:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/03/02/change-of-top-level-domain-to-dev/</guid>
      <description>On Feb 28th the top level domain .dev has been available for all. So for me as a developer it&amp;rsquo;s the best possible TLD to get. One day later I reserved two different ones:&#xA;themue.dev as a replacement for my former personal domain themue.name and tideland.dev as a replacement of all my different Tideland domains into one. The personal domain is now changed, the Tideland domains will follow these days. Then I also have to change the new Go mono repository I&amp;rsquo;m migrating my packages to.</description>
    </item>
  </channel>
</rss>
