<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Release on Embrace Change, Shape the Future</title>
    <link>//localhost:1313/tags/release/</link>
    <description>Recent content in Release on Embrace Change, Shape the Future</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Apr 2023 15:00:00 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/release/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tideland Go Actor v0.3.0</title>
      <link>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</link>
      <pubDate>Sun, 09 Apr 2023 15:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</guid>
      <description>I&amp;rsquo;m happy to share with you some news about the new release v0.3.0 of the Tideland Go Actor. This new version comes with a handful of exciting updates and improvements that make it easier and more efficient to work with Actors in Go. One important change in this release is the addition of the Repeat() method. This new feature allows developers to run background Actions in intervals, making it easier to handle long-running tasks in the background.</description>
    </item>
    <item>
      <title>Tideland Go Slices v0.1.1</title>
      <link>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</link>
      <pubDate>Sat, 20 Aug 2022 21:00:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</guid>
      <description>So far I had not missed generics in Go. Much could be solved via interfaces or closures. And with the disgusting syntactic aberrations of other languages when dealing with generics, I was rather afraid that the elegant simplicity of Go could be lost. As of Go 1.18, Google&amp;rsquo;s language now handles generics after much discussion.&#xA;I have always appreciated the implicit simplicity with which, for example, types in a statement like</description>
    </item>
    <item>
      <title>Tideland Go Wait v0.2.0</title>
      <link>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</link>
      <pubDate>Sat, 05 Mar 2022 22:25:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</guid>
      <description>The package Tideland Go Wait reached v0.2.0 due to a new added feature. It now contains the type Throttle to provide a limited processing of events per second, e.g. for web handlers. The events are simple closures or functions with a given signature. The limit and a burst size for the maximum number of events during one call are defined at throttle creation.&#xA;Example A throttled wrapper of a http.Handler.</description>
    </item>
    <item>
      <title>Tideland Go Audit v0.6.5</title>
      <link>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</link>
      <pubDate>Tue, 01 Mar 2022 15:43:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</guid>
      <description>There are times when you find a bug in your software. Today it had been in my testing library TIdeland Go Audit. Here the assertion ErrorContains() reacted with a panic in case of a nil error. So I fixed it like I already had done it earlier in ErrorMatch(). Interestingly I found in testing that I didn&amp;rsquo;t verified it there. So this test is now changed too.&#xA;Additionally during tests for a different library with high concurrency I, or better go test during the tests, discovered a race condition.</description>
    </item>
  </channel>
</rss>
