<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on Embrace Change, Shape the Future</title>
    <link>//localhost:1313/tags/http/</link>
    <description>Recent content in Http on Embrace Change, Shape the Future</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Mar 2019 22:50:00 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Donâ€™t be afraid of multiplexing</title>
      <link>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</link>
      <pubDate>Sat, 23 Mar 2019 22:50:00 +0100</pubDate>
      <guid>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</guid>
      <description>Pretty often you read questions about multiplexing in Go web application on Slack, StackOverflow, or Reddit. Sometimes they think about using libraries like gorilla/mux, which is a powerful software, and its alternatives. Depending on individual requirements and constraints these may make sense, but for many cases the standard library or own little packages based on the standard library are more than enough. I&amp;rsquo;ll show the idea behind the Go net/http package and how to build own solutions based on it.</description>
    </item>
  </channel>
</rss>
