
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Whisky on Embrace Change, Shape the Future</title>
   <link>//localhost:1313/categories/whisky/</link>
   <description>Recent content in Whisky on Embrace Change, Shape the Future</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Sun, 17 Mar 2024 21:10:00 +0200</lastBuildDate>
   
       <atom:link href="//localhost:1313/categories/whisky/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Happy St. Patrick’s Day</title>
       <link>//localhost:1313/posts/2024/03/17/happy-st.-patricks-day/</link>
       <pubDate>Sun, 17 Mar 2024 21:10:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2024/03/17/happy-st.-patricks-day/</guid>
       <description>&lt;p&gt;It is 17 March. And what about it? Well, it’s &lt;strong&gt;St. Patrick’s Day&lt;/strong&gt; ☘️ again. It’s one of the island’s wonderful traditions, very special, celebrated and with its own culinary delights.&lt;/p&gt;&lt;p&gt;And so I&amp;rsquo;ve yesterday prepared myself cooking a big pot of &lt;strong&gt;Irish Stew&lt;/strong&gt;. It was left to mature overnight and I treated myself to it today with a delicious &lt;strong&gt;Guinness&lt;/strong&gt;. Now I’m rounding off the evening with a fine  &lt;strong&gt;Bushmills 10 yo&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;“Sláinte mhath!”&lt;/em&gt; — &lt;em&gt;“Sláinte agatsa!”&lt;/em&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>C&amp;S Dram Senior Balblair 21 yo</title>
       <link>//localhost:1313/posts/2023/07/22/cs-dram-senior-balblair-21-yo/</link>
       <pubDate>Sat, 22 Jul 2023 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2023/07/22/cs-dram-senior-balblair-21-yo/</guid>
       <description>&lt;p&gt;After a &lt;strong&gt;Balblair 27 yo&lt;/strong&gt; from 1974, I was interested in more special bottlings of these malts. A hunt via eBay then led me to this &lt;strong&gt;C&amp;amp;S Dram Senior Balblair 21 yo&lt;/strong&gt;. Cheap at the time of purchase, now hardly available or only at a premium.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;This particular Belblair welcomes the nose with a very special aroma. It contains intense, partly sour notes of red fruits, orange and strong sherry. Pleasantly musty. It is accompanied by a nice dark chocolate of at least 90%. It finishes with a hint of sulfur. This is peculiar, but it is fitting.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;On the tongue, the malt is sweet, but also very spicy. This fits the aroma, as do the notes of chocolate and nuts here. This is complemented by nice oak, strong sherry and dried fruits like apricots and dates.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The wonderful journey is completed by a long, warm and intense finish. Slightly dry, this lasts pleasantly long and rounds off the enjoyment of this wonderful malt.&lt;/p&gt;&lt;p&gt;With the C&amp;amp;S Dram Senior Balblair 21 yo, Dram Senior has succeeded in creating a beautiful and special drop based on this little-known distillery. Like the 27 yo, this brandy is worthwhile. I give it &lt;strong&gt;93/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ardbeg Wee Beastie</title>
       <link>//localhost:1313/posts/2023/05/17/ardbeg-wee-beastie/</link>
       <pubDate>Wed, 17 May 2023 21:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2023/05/17/ardbeg-wee-beastie/</guid>
       <description>&lt;p&gt;At 5 years old, &lt;strong&gt;Ardbeg Wee Beastie&lt;/strong&gt; is younger than our good classic Ardbeg TEN. Thus, it is to be expected that he is stronger and wilder than his big brother, the name suggests it. And so it is, though not to the strong degree that the age difference would lead one to expect.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;Initially, intense pepper and sea salt can be perceived. This is then joined by sweet notes of pine resin and the lovely smoke of an open campfire. The latter at a too intense first whiff as if sitting in the middle of the wind. But in the pleasant phase, there is a nice little note of caramel in the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;In the taste remains the impression of the sea with a round pinch of salt, as in the spray. To this is added an even more intense large surge of burning wood. I wish we hadn&amp;rsquo;t gotten on the wrong side of the Easter fire. Once this flavor is digested, there is some bitter chocolate and a nice pinch of hot pepper.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The Wee Beastie behaves as an Ardbeg should in the finish. It is and remains strong, long and warm, its finish is yeasty, full and salty. Nothing exciting, but the expectation is met.&lt;/p&gt;&lt;p&gt;This malt is not a major highlight of the Ardbeg family, but it is favorable. And so it is a pleasant addition at the lower end. Young, wild, smoky with nice pepper. And so I give it &lt;strong&gt;79/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>JAX 2023</title>
       <link>//localhost:1313/posts/2023/05/13/jax-2023/</link>
       <pubDate>Sat, 13 May 2023 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2023/05/13/jax-2023/</guid>
       <description>&lt;p&gt;This week in Mainz was &lt;strong&gt;JAX 2023&lt;/strong&gt; again, organized by Software &amp;amp; Support. It was nice, because slowly the conferences are getting more full, more real again. JAX was also hybrid and the organizers put a lot of effort into streaming all workshops and talks in parallel and connecting visitors at home via chat. But it&amp;rsquo;s not the same as on-site, sharing, discussing, laughing, eating and drinking.&lt;/p&gt;&lt;p&gt;As I said, the conference consisted of workshops on Monday and Friday, and three days of keynotes, talks and panel discussions from Tuesday through Thursday. These middle three days I was there on site. On Tuesday I arrived very early via train and had a very nice ride along the Rhine, the &lt;em&gt;Deutsches Eck&lt;/em&gt; and the &lt;em&gt;Loreley&lt;/em&gt;. Around noon, with only 7 minutes delay, I was then on site, met also immediately acquaintances and visited my first Talks.&lt;/p&gt;&lt;h3 id=&#34;my-contributions&#34;&gt;My contributions&lt;/h3&gt;&lt;p&gt;On Tuesday evening, armed with a beer, it was time for me to take to the stage as well. We were five pretty old hands, &lt;em&gt;Nils Hartmann&lt;/em&gt;, &lt;em&gt;Michael Inden&lt;/em&gt;, &lt;em&gt;Arno Haase&lt;/em&gt;, &lt;em&gt;Thorsten Schleinzer&lt;/em&gt; and me. Our topic was alternative languages to Java, on that day Typescript, Kotlin, Python, Rust, and Go. The event was very well attended and the audience had a lot of interest. I thought it was a very nice form.&lt;/p&gt;&lt;p&gt;And also on Wednesday I had my own contributions. My topic was, as should be expected, Go again. The first talk in the morning was on &lt;a href=&#34;https://www.slideshare.net/TheMue/jax-2023-generics-in-go&#34;&gt;Generics in Go&lt;/a&gt;. The room was not huge, which was not to be expected for the topic. But it was well occupied, the audience participated well and also had questions. I finished on time after 60 minutes and was very satisfied, thanks to my audience. In the late afternoon I had an equally large room, but because of the fringe topic &lt;a href=&#34;https://www.slideshare.net/TheMue/jax-2023-cloud-provider-apis&#34;&gt;Cloud Provider APIs&lt;/a&gt; it was arguably sparse. Perhaps Kubernetes operator development would have been a better fit. Nevertheless, thanks again to the audience who responded to my questions and interacted with me visually.&lt;/p&gt;&lt;h3 id=&#34;the-other-contributions&#34;&gt;The other contributions&lt;/h3&gt;&lt;p&gt;Given the variety of topics offered, it&amp;rsquo;s not surprising that I found what I was looking for. Java topics, however, were fewer; here, the topic was maintenance. Important were the interplay of EDA and RESTful APIs in larger architectures, Domain-Driven Design, software development in the future and responding to AI, architecture for humans, Kubernetes, the technological and cultural shift to larger IT landscapes, and testability. Lots of exciting topics from good speakers. I will look at more via Software &amp;amp; Support&amp;rsquo;s platform.&lt;/p&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Was it worth it? Both from the active and passive aspect? Yes, it was very good again, with a lot of fun as well as a lot of knowledge. And meeting old acquaintances and getting to know new faces was also very nice. I am looking forward to the next JAX.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tideland Go Actor v0.3.0</title>
       <link>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</link>
       <pubDate>Sun, 09 Apr 2023 15:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2023/04/09/tideland-go-actor-v0.3.0/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m happy to share with you some news about the new release &lt;strong&gt;v0.3.0&lt;/strong&gt; of the &lt;strong&gt;Tideland Go Actor&lt;/strong&gt;. This new version comes with a handful of exciting updates and improvements that make it easier and more efficient to work with Actors in Go. One important change in this release is the addition of the &lt;code&gt;Repeat()&lt;/code&gt; method. This new feature allows developers to run background Actions in intervals, making it easier to handle long-running tasks in the background.&lt;/p&gt;&lt;p&gt;Additionally, the &lt;strong&gt;Tideland Go Actor&lt;/strong&gt; now added &lt;code&gt;context.Context&lt;/code&gt; to individual Action calls. It is a significant improvement which provides a more granular control like timeouts, deadlines or cancellations. As the &lt;code&gt;Context&lt;/code&gt; now provides the timeout control, the two methods &lt;code&gt;DoSyncTimeout()&lt;/code&gt; and &lt;code&gt;DoAsyncTimeout()&lt;/code&gt; have been removed.&lt;/p&gt;&lt;p&gt;Another internal change is, that synchronous and asynchrounous Actions are now handled in the same queue. In this form, the synchronous Actions are no longer preferred or can even block asynchronous Actions. Lastly, the &lt;strong&gt;Tideland Go Actor&lt;/strong&gt; has improved external checking to see if the Actor is still running by adding a &lt;code&gt;IsDone() bool&lt;/code&gt; method as well as a &lt;code&gt;Done() &amp;lt;-chan struct{}&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;Overall, the &lt;strong&gt;Tideland Go Actor v0.3.0&lt;/strong&gt; release includes a host of valuable updates and improvements that will make working with Actors in Go easier and more efficient. For more information, please see the &lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/actor&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://github.com/tideland/go-actor&#34;&gt;source code&lt;/a&gt;. I hope it helps you to create concurrent applications in Go a more simple way.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenfiddich 21 yo Gran Reserva</title>
       <link>//localhost:1313/posts/2023/02/08/glenfiddich-21-yo-gran-reserva/</link>
       <pubDate>Wed, 08 Feb 2023 22:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2023/02/08/glenfiddich-21-yo-gran-reserva/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;Glenfiddich 21 yo Gran Reserva&lt;/strong&gt; is certainly not the first malt I have come across from this distillery. More commonly known is the 12-year-old, an affordable and good entry-level whisky. But I have had the opportunity to enjoy a 21-year-old from the house before. This was the legendary &lt;strong&gt;Glenfiddich 21 yo Havana Reserve&lt;/strong&gt; and it was really very good. But it was not allowed to be imported into the USA with that name. Today it is only available as a collector&amp;rsquo;s item. The Gran Reserva is its successor.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The nose is greeted by the Glenfiddich very sweet and fruity. The malt seems like a sea of flowers, complemented with papaya as well as some brittle and ginger. There is also a hint of vanilla. The end is a beautiful nutty burn.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;On the palate, this whisky is amazingly intense and spicy. There is also a very nice honey and, amazingly, the aroma of antique leather. You also taste the oak from the maturation, rounded off with citrus fruits and at the end again the ginger of the nose.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish of the Gran Reserva is again beautifully spicy. The finish is pleasantly warm and lingers long. At the end, it also gets tingly warm in the stomach.&lt;/p&gt;&lt;p&gt;The Glenfiddich 21 yo Gran Reserva is a very nice malt. It doesn&amp;rsquo;t quite keep up with its excellent old predecessor. This one was rounder and smoother. But for a very complex 21-year-old whisky, it is a relatively inexpensive addition to one&amp;rsquo;s collection from Speyside. I give it &lt;strong&gt;87/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Talisker 18 yo</title>
       <link>//localhost:1313/posts/2023/01/05/talisker-18-yo/</link>
       <pubDate>Thu, 05 Jan 2023 22:00:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2023/01/05/talisker-18-yo/</guid>
       <description>&lt;p&gt;One of the always very good distilleries is &lt;strong&gt;Talisker&lt;/strong&gt; on the Isle of Skye. They produce malts with and without an age statement. The &lt;strong&gt;Talisker 18 yo&lt;/strong&gt; has a mature age, which welcomes the gourmet with a beautiful golden color and a strong 45.8 %.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A wonderful aroma welcomes the connoisseur, it cannot deny its origin with sea salt and seaweed. But there are also sweet berries and a light caramel. In the background, there is quite a bit of vinegar.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste of &lt;strong&gt;Talisker 18 yo&lt;/strong&gt; is pleasantly soft and warm. The most important component is nut, but also pleasant smoke and pepper. It&amp;rsquo;s nice to notice how oily this drop is, leaving a pleasant feeling on the tongue.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;After this soft taste, it gets intense. Long lasting, lots of complex spices on the tongue and a strong warmth with some smoke in the throat reminds of every sip enjoyed before, very nice.&lt;/p&gt;&lt;p&gt;One notices Talisker&amp;rsquo;s Nordic origin. While the wind beats the waves of the sea against the cliffs and the salty spray blows over the meadows. And together with everything that the bushes and forests of the hinterland have to offer, a varied, intense and beautiful drop was created. And so, with its &lt;strong&gt;91/100&lt;/strong&gt; points, it belongs to the very good malts.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Dalmore Port Wood Reserve</title>
       <link>//localhost:1313/posts/2022/12/11/dalmore-port-wood-reserve/</link>
       <pubDate>Sun, 11 Dec 2022 23:11:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/12/11/dalmore-port-wood-reserve/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;Dalmore Port Wood Reserve&lt;/strong&gt; is marketed as No Age without any indication of age. However, there is information from the distillery that it is matured for 14 years in bourbon casks before it is finished for 2 to 3 years in Portuguese port wine casks. This makes it at least 16 years old.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Dalmore Port Wood Reserve pleases, as is to be expected with its finish, with fruity and strong notes. They are determined by plums and blood oranges. There are also currants and a small hint of toffee.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste is then wonderfully strong. The blood oranges are found again, along with delicious cranberries. Then there is some dark chocolate with creamy caramel. At the end, a nice pinch of white pepper wins.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;In the finish, the Dalmore pleases with warmth and intensity for a long time. It&amp;rsquo;s nice how the spiciness of the pepper is taken over and gently dissipates.&lt;/p&gt;&lt;p&gt;All in all, Dalmore has succeeded in creating a wonderful drop. Intense and powerful, round and warm, long and soothing. It&amp;rsquo;s fun and always ends up on the re-procurement list after consumption. I rate it with a nice &lt;strong&gt;93/100&lt;/strong&gt; points high up among my malts.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Bunnahabhain 12 yo</title>
       <link>//localhost:1313/posts/2022/10/28/bunnahabhain-12-yo/</link>
       <pubDate>Fri, 28 Oct 2022 22:00:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/10/28/bunnahabhain-12-yo/</guid>
       <description>&lt;p&gt;There are some of the relative cheap Islay whiskies which are in most collections. Like the &lt;strong&gt;Laphroaig 10 yo&lt;/strong&gt; or the &lt;strong&gt;Ardbeg TEN&lt;/strong&gt;. Another interesting one of them, completely without smoke, is the &lt;strong&gt;Bunnahabhain 12 yo&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The nose of the Bunnahabhain is strong difference from typical Islay whiskies. It&amp;rsquo;s a fresh and round fragrance, sweet with a hint of sultanas. and cereals. There are also nuts and very little smoke in the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste of the Bunnahabhain is intense with light fruity notes. In addition, the malt contains hints of nuts, some vanilla and malt.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish is beautifully warm and mild. This lasts for a long time and is pleasant.&lt;/p&gt;&lt;p&gt;A round and mild Islay without much smoke or peat. And this at a reasonable price. So you can add it well to your own collection. I give it &lt;strong&gt;79/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenfiddich 15 yo Unique Solera Reserve</title>
       <link>//localhost:1313/posts/2022/10/28/glenfiddich-15-yo-unique-solera-reserve/</link>
       <pubDate>Fri, 28 Oct 2022 21:00:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/10/28/glenfiddich-15-yo-unique-solera-reserve/</guid>
       <description>&lt;p&gt;Glenfiddich is one of the great and well-known distilleries of Speyside, for many especially the twelve-year-old found in many shops. But the distillery offers many more variants. One is the &lt;strong&gt;Glenfiddich 15 yo Unique Solera Reserve&lt;/strong&gt;, a fine drop from the house.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Glenfiddich pleases with a wonderful soft note. Leading the way is a delicious honey, rounded off very lightly by a little banana. Vanilla scents form the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste, on the other hand, starts off more intense. Chilli and pepper immediately spread on the tongue. But they are not alone. After the initial impact, the paray nut and some strong dark chocolate caress the palate. At the end, a hint of oak rounds off the taste.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;After this wave, a warm and intense finish can now be enjoyed. It lasts long without burning.&lt;/p&gt;&lt;p&gt;The Glenfiddich 15 yo is a pleasant and round Speyside, wonderfully intense in nose and mouth, beautifully warm on the finish. Just right for an autumn evening after a sunny day. I gave it &lt;strong&gt;83/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Laphroaig 10 yo Sherry Oak Finish</title>
       <link>//localhost:1313/posts/2022/08/30/laphroaig-10-yo-sherry-oak-finish/</link>
       <pubDate>Tue, 30 Aug 2022 20:30:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/08/30/laphroaig-10-yo-sherry-oak-finish/</guid>
       <description>&lt;p&gt;In addition to the standard malt, Laphroaig also offers special bottlings from time to time. The &lt;strong&gt;Laphroaig 10 yo Sherry Oak Finish&lt;/strong&gt; with 48% is such a speciality. After American bourbon casks, it still matures in sherry casks and here still specifically an Oloroso sherry finish.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A nice intense aroma hits the nose right off the bat. It contains salt and iodine, but also turpentine. Dark chocolate and wet wood finish.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste explodes with a lot of pepper. The wet wood of the aroma is continued even more strongly. Notes of seaweed and smoke round out the flavor.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;In the finish, the Laphroaig spoils beautifully warm and long. It is always pleasant and round. The warmth brought along at the beginning lasts a nice long time even after the sip has already reached its destination.&lt;/p&gt;&lt;p&gt;With this drop, Laphroaig has again succeeded in creating a truly beautiful Islay. He takes with his enjoyment on a beautiful journey. With the Sherry Oak Finish 10 yo, the distillery remains true to its style and has increased its diversity again. In my rating, it receives &lt;strong&gt;83/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tideland Go Slices v0.1.1</title>
       <link>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</link>
       <pubDate>Sat, 20 Aug 2022 21:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/08/20/tideland-go-slices-v0.1.1/</guid>
       <description>&lt;p&gt;So far I had not missed &lt;strong&gt;generics&lt;/strong&gt; in &lt;strong&gt;Go&lt;/strong&gt;. Much could be solved via interfaces or closures. And with the disgusting syntactic aberrations of other languages when dealing with generics, I was rather afraid that the elegant simplicity of Go could be lost. As of Go 1.18, Google&amp;rsquo;s language now handles generics after much discussion.&lt;/p&gt;&lt;p&gt;I have always appreciated the implicit simplicity with which, for example, types in a statement like&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;imAString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myStringReturningFunc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;some&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;can be derived. Why should I specify the type of &lt;code&gt;imAString&lt;/code&gt; too? It is the return type of &lt;code&gt;myStringReturningFunc()&lt;/code&gt; , so this clear. It feels like in dynamically typed languages. And it is nice that we managed to transfer this ease to the generics as well. Now it&amp;rsquo;s just a matter of not polluting your own code with unnecessary generics and possibly used constraints.&lt;/p&gt;&lt;p&gt;Nevertheless, Go version 1.19 has been released in the meantime and I had not yet found a use for generics. But I wanted to give it a try. Then I thought of the feature-rich module &lt;code&gt;lists&lt;/code&gt; in the &lt;strong&gt;Erlang/OTP&lt;/strong&gt; language. I wanted to use this for slices in Go. The result is my new library &lt;strong&gt;Tideland Go Slices v0.1.1&lt;/strong&gt;. Thanks to generics it allows easy and comfortable handling of slices of any type. Some instructions would be for example&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vs1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FoldL&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; }, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;myStringSlice&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vs2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reverse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;myCustomerStructSlice&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vs3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SortWith&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cs&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Customer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cs&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cs&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;myCustomerStructSlice&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vs4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slices&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unique&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mySliceWithDuplicates&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Documentation and code can be found at&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/slices&#34;&gt;https://pkg.go.dev/tideland.dev/go/slices&lt;/a&gt; and&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/tideland/go-slices&#34;&gt;https://github.com/tideland/go-slices&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Have fun with it.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>The Balvenie Single Barrel Sherry Cask 15 yo</title>
       <link>//localhost:1313/posts/2022/08/19/the-balvenie-single-barrel-sherry-cask-15-yo/</link>
       <pubDate>Fri, 19 Aug 2022 22:30:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/08/19/the-balvenie-single-barrel-sherry-cask-15-yo/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;The Balvenie Single Barrel Sherry Cask 15 yo&lt;/strong&gt; with its 47.8% is a special drop. It is not available in every store, I ordered it in France. This was easy for me, even without a previous tasting, as none of my Balvenies have ever disappointed me so far. So also this time.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The nose of this malt immediately greets with wonderful notes. There are fruits such as cranberries and beautiful orange. In addition, there is the oak and the sherry of the barrel. Exciting here is an intense yet not too strong mix of spices with cloves, various herbs and also some salt. The end is formed by light adhesive notes.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The orange is immediately found in the taste, as well as the oak. But they are very much accompanied by dark chocolate. The end is formed by some pepper. It is nice how it becomes even rounder, warmer and more harmonious with each sip.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;As nice as the nose and taste are, the finish is just as nice. The Balvenie is a long lasting warm drop, until the end you can find the sherry notes. This is a nice way to enjoy this particular malt.&lt;/p&gt;&lt;p&gt;Balvenie has succeeded with this 15-year-old single barrel a wonderful drop. The price is certainly not without, it is not a malt for quick takeaway. But it is worth every euro. With me, it reaches &lt;strong&gt;91/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenmorangie Extremely Rare 18 yo</title>
       <link>//localhost:1313/posts/2022/08/07/glenmorangie-extremely-rare-18-yo/</link>
       <pubDate>Sun, 07 Aug 2022 21:30:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/08/07/glenmorangie-extremely-rare-18-yo/</guid>
       <description>&lt;p&gt;A few weeks have passed since the last entry. Which doesn&amp;rsquo;t mean that I haven&amp;rsquo;t had any malts. The corresponding tasting notes will follow in the coming days. The first one today is the &lt;strong&gt;Glenmorangie Extremely Rare 18 yo&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A pleasant soft and very mild nose with sweet notes of berries and honey. There is also some white chocolate and the mild aroma of caramel. The contrast is provided by light oak notes and the spiciness of ginger. So the aroma is always fun.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The vanilla and chocolate are found in the taste. The most important element, however, is the sherry, plus some nut, the tingle of salt and, at the end, the spiciness of pepper. Round, if not exciting.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish, on the other hand, is again a nice contrast. It is mild like the malt overall, not scratchy and smoky. Instead, it is long lasting and pleasantly warm. This rounds out the enjoyment.&lt;/p&gt;&lt;p&gt;The Glenmorangie Extremely Rare 18 yo is a nice round drop, mild and warm, soft and long lasting. This makes fun and the malt so a good drop for a Sunday evening. In my rating, he receives &lt;strong&gt;83/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>A chance is given</title>
       <link>//localhost:1313/posts/2022/06/19/a-chance-is-given/</link>
       <pubDate>Sun, 19 Jun 2022 12:00:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/06/19/a-chance-is-given/</guid>
       <description>&lt;p&gt;From time to time, the opportunity presents itself for a decision that would not normally be necessary. However, it opens up the possibility of moving in a direction that is both reminiscent of beautiful points in the past, appealing in its environment and brings a nice new challenge. A few months ago this opportunity reached me through a contact over Internet and with the beginning of this month it has become effective.&lt;/p&gt;&lt;p&gt;However, from the beginning. I started my latest professional job about three and a half years ago. It was the small Hamburg company &lt;em&gt;Loodse&lt;/em&gt; with its worldwide distributed employees and a cuddly mascot. At the time of my start we were just under 25 employees. On the one hand, the company produces powerful software for the setup and management of Kubernetes clusters, and on the other hand, it advises and trains companies on the subject of Kubernetes. Today, the company&amp;rsquo;s name is international &lt;a href=&#34;https://www.kubermatic.com&#34;&gt;Kubermatic&lt;/a&gt; and it has just over 100 employees. It has been fun every day to accompany this company on this journey. Through various steps, I held the role of a team leader in software development here at the end with 10 great colleagues. I would like to greet and thank them all again here. And also the rest of the colleagues includes many great people. They have been a lot of fun and I look forward to meeting them at conferences in the future.&lt;/p&gt;&lt;p&gt;With that, there was no reason to change. However, if you look at the current market, there are mountains of job offers pelting experienced developers in Cloud Native and Kubernetes. It&amp;rsquo;s sad how often these are poorly researched. They offer no motivation, don&amp;rsquo;t fit my career path, or are trying to convince me to move. With that said, with some exceptions, this is not something that makes me bright-eyed. At the same time, however, I still had an open wish. The world of clouds and Kubernetes may be technologically fascinating, but it lacks a view of the business units. These used to be part of my work in different roles. And I wanted to have that comprehensive view of everything again, not just the technology.&lt;/p&gt;&lt;p&gt;And then came the job offer that matched this. It has been the role of &lt;em&gt;Director Technological Architecture Platform&lt;/em&gt; with the task of taking responsibility for a company&amp;rsquo;s IT architecture with my own team. This sounded technologically and professionally interesting from the description, however, it became even more interesting for me. The company is &lt;a href=&#34;https://www.sonnen.de&#34;&gt;sonnen&lt;/a&gt; and is active in the field of electricity storage and renewable energy. Green energy has motivated me since I was in high school. All our conversations after making contact were fun, we immediately hit it off on many points. As a result, we ended up signing a contract.&lt;/p&gt;&lt;p&gt;On June 1, I started my job. Most of my work will continue to be remote. From time to time, however, I also visit Berlin - as I did in the very first week - or Wildpoldsried. Getting to know each other directly and the first video chats were great. It was friendly, open, immediately with a lot of fun, interest and constructive exchange. This is now continuing with technical and planning discussions. And I am looking forward to my first visit to Wildpoldsried, because this place is located in the beautiful Allgäu.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Talk about declarative APIs</title>
       <link>//localhost:1313/posts/2022/05/06/talk-about-declarative-apis/</link>
       <pubDate>Fri, 06 May 2022 22:10:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/05/06/talk-about-declarative-apis/</guid>
       <description>&lt;p&gt;As you know, I from time to time have the chance to give a talk about an interesting topic. Sometimes it&amp;rsquo;s pretty close to my work, sometimes it&amp;rsquo;s just inspired by my own ideas. In this case it&amp;rsquo;s a mix.&lt;/p&gt;&lt;p&gt;The conference this time had been the &lt;strong&gt;betterCode() API&lt;/strong&gt; on 27.04.2022. Here I had the talk &lt;em&gt;&amp;ldquo;Let the computer do it - Usage of declarative APIs&amp;rdquo;&lt;/em&gt;. It describes the troubles of today usual imperative APIs and how to use them in a declarative way. One example is more technological than business, it&amp;rsquo;s about Kubernetes. But the idea can be used for an own infrastructure running business services in a declarative way. Alternatively you could talk Kubernetes as runtime and place your business into operators.&lt;/p&gt;&lt;p&gt;You&amp;rsquo;ll find the slides as usual at &lt;a href=&#34;https://www.slideshare.net/TheMue/let-the-computer-do-it&#34;&gt;SlideShare&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Lagavulin 16 yo</title>
       <link>//localhost:1313/posts/2022/05/06/lagavulin-16-yo/</link>
       <pubDate>Fri, 06 May 2022 21:30:00 +0200</pubDate>
       
       <guid>//localhost:1313/posts/2022/05/06/lagavulin-16-yo/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;Lagavulin 16 yo&lt;/strong&gt; is a true classic, well known in almost every whisky collection. And for good reason, because it is a beautiful representative of this important region.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;It plays around the nose with initial salt and unusual iodine. Peat and smoke are found only a little, but a little cold ashtray. The scent of citrus fruits and flowers round off the nose.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;At the beginning, the tongue receives a nice round initial sharpness and also the iodine from the nose. They last for a long time. In addition, there is the peat of an Islay. The end is prepared by chocolate, marmalade and nuts, also some sweetness.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish of the Lagavulin 16 yo is very pleasant. It is wonderfully long and deep, and wonderfully warm. At the same time, it remains soft, not scratchy. It&amp;rsquo;s fun and invites you to enjoy it.&lt;/p&gt;&lt;p&gt;The summary is simple, the Lagavulin 16yo is right. It is an Islay, but does not burn your throat. It is intense, contains the right flavours and offers a thrilling journey from the exciting nose to the intense flavour to the round and warm finish. A must for every collection. It scores &lt;strong&gt;90/100&lt;/strong&gt; points in my rating.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tideland Go Wait v0.2.0</title>
       <link>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</link>
       <pubDate>Sat, 05 Mar 2022 22:25:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/03/05/tideland-go-wait-v0.2.0/</guid>
       <description>&lt;p&gt;The package &lt;strong&gt;Tideland Go Wait&lt;/strong&gt; reached &lt;strong&gt;v0.2.0&lt;/strong&gt; due to a new added feature. It now contains the type &lt;code&gt;Throttle&lt;/code&gt; to provide a limited processing of events per second, e.g. for web handlers. The events are simple closures or functions with a given signature. The limit and a burst size for the maximum number of events during one call are defined at throttle creation.&lt;/p&gt;&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;&lt;p&gt;A throttled wrapper of a &lt;code&gt;http.Handler&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThrottledHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;throttle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Throttle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewThrottledHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Limit&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ThrottledHandler&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;throttle&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewThrottle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ThrottledHandler&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;throttle&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The documentation still can be found at &lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/wait&#34;&gt;pkg.go.dev&lt;/a&gt;, the project sources at &lt;a href=&#34;https://github.com/tideland/go-wait&#34;&gt;GitHub&lt;/a&gt;. Enjoy it.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>The Glenlivet 18 yo</title>
       <link>//localhost:1313/posts/2022/03/05/the-glenlivet-18-yo/</link>
       <pubDate>Sat, 05 Mar 2022 22:01:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/03/05/the-glenlivet-18-yo/</guid>
       <description>&lt;p&gt;Some drops I let stand a little long, this one five years. But I&amp;rsquo;m glad that with my &lt;strong&gt;The Glenlivet 18 yo&lt;/strong&gt; the cork is not dry and the now opened bottle continues to seal well. It will not get much older now, but a good closure is already important.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A wonderful aroma reaches the nose on the Glenlivet. Sweet berries start things off, but are then complemented by hearty and fresh moss and leather notes. Then in the background there is nice dark chocolate with at least 90%. And even though it is a Speyside, the aroma contains some peat.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;On the palate, the Glenlivet 18 yo is delightfully mild and warm. A mix of nuts and vanilla, but also with slight spiciness from ginger and some pepper.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;Right out of the taste, the malt transitions into a nice warm and lingering finish. It is accompanied by oak and malt.&lt;/p&gt;&lt;p&gt;The Glenlivet 18 yo may not be high end, but it is pleasing, very round and nice, very smooth and also very warm. A pleasant malt for a quiet evening. It achieved &lt;strong&gt;89/100&lt;/strong&gt; points in my rating.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tideland Go Audit v0.6.5</title>
       <link>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</link>
       <pubDate>Tue, 01 Mar 2022 15:43:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/03/01/tideland-go-audit-v0.6.5/</guid>
       <description>&lt;p&gt;There are times when you find a bug in your software. Today it had been in my testing library &lt;strong&gt;TIdeland Go Audit&lt;/strong&gt;. Here the assertion &lt;code&gt;ErrorContains()&lt;/code&gt; reacted with a panic in case of a &lt;code&gt;nil&lt;/code&gt; error. So I fixed it like I already had done it earlier in &lt;code&gt;ErrorMatch()&lt;/code&gt;. Interestingly I found in testing that I didn&amp;rsquo;t verified it there. So this test is now changed too.&lt;/p&gt;&lt;p&gt;Additionally during tests for a different library with high concurrency I, or better &lt;code&gt;go test&lt;/code&gt; during the tests, discovered a race condition. I&amp;rsquo;m using &lt;code&gt;math.Rand&lt;/code&gt; in &lt;code&gt;generators.Generator&lt;/code&gt; and it is not safe for concurrent use. In most cases, just as it is a simple test data generater, it has been okay. But now I wanted to use this opportunity fix it too.&lt;/p&gt;&lt;p&gt;The documentation still can be found at &lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/audit&#34;&gt;pkg.go.dev&lt;/a&gt;, the project sources at &lt;a href=&#34;https://github.com/tideland/go-audit&#34;&gt;GitHub&lt;/a&gt;. Enjoy it.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>The GlenDronach Parliament 21 yo</title>
       <link>//localhost:1313/posts/2022/02/15/the-glendronach-parliament-21-yo/</link>
       <pubDate>Tue, 15 Feb 2022 22:01:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/02/15/the-glendronach-parliament-21-yo/</guid>
       <description>&lt;p&gt;A drop that had to wait almost three years for me to open it. But now there has been an event that I wanted to reward myself for. So I looked for my &lt;strong&gt;The GlenDronach Parliament 21 yo&lt;/strong&gt; from my stash and allowed this old Highland speciality with 48% to find its way into my nosing glass.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A really nice and intense blend, of plums and sultanas, of light walnut notes, violets and spices. They caress the nose. Later, the scent reminds of Christmas pastries.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste of GelnDronach is wonderfully intense and round. The sherry is found again, as are the plums and the walnuts. There are also tones of bitter chocolate, a little orange and cinnamon. This is more fun with every sip.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish is just as beautiful as the taste. It lasts a long time and is already warm. At the same time, it leaves a tasty spiciness in the mouth.&lt;/p&gt;&lt;p&gt;With its 21 years, Parliament is not a drop for every day, but for nice occasions. It achieved &lt;strong&gt;94/100&lt;/strong&gt; points on my scale.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenmorangie 14 yo Quinta Ruban</title>
       <link>//localhost:1313/posts/2022/02/15/glenmorangie-14-yo-quinta-ruban/</link>
       <pubDate>Tue, 15 Feb 2022 22:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/02/15/glenmorangie-14-yo-quinta-ruban/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;Glenmorangie 14 yo Quinta Ruban&lt;/strong&gt; is a beautiful variant of the Glenmorangie. Aged longer than typical 10 or 12 year olds, matured in ex-bourbon casks with a finish in Ruby Port Pipes. The result is an affordable Highland malt with 46%.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Quinta Ruban caresses the nose with a scent of beautiful dark and strong oranges and chocolate. There is damp wood in the background. Scents of exotic spices and flowers complete the beautiful picture. You don&amp;rsquo;t even want to start drinking it, it smells so nice.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;A deliciously lush yet soft taste tickles the tongue. It contains many fruity notes, of which the tangerine is the most intense. Next to this is the beautiful chocolate of the nose, rounded off by nuts and lots of spices.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The malt goes down the throat nicely long lasting and warm, also notes like chocolate and orange are pleasantly found here.&lt;/p&gt;&lt;p&gt;A wonderfully rich drop, warm, round and long lasting. I also like the mix of strong chocolate and orange in chocolates. Here it&amp;rsquo;s rounded off by the spices and the lovely notes of a mature single malt. And so this Glenmorangie achieves &lt;strong&gt;88/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Highland Park Cask Strength Release No. 1</title>
       <link>//localhost:1313/posts/2022/02/04/highland-park-cask-strength-release-no.-1/</link>
       <pubDate>Fri, 04 Feb 2022 22:57:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/02/04/highland-park-cask-strength-release-no.-1/</guid>
       <description>&lt;p&gt;You may know my preferences for cask strength whiskies in general as well as whiskies by Highland Park. And so the &lt;strong&gt;Highland Park Cask Strength Release No. 1&lt;/strong&gt; is a very special whisky for me. I bought it last year and today I opened it today. It has 63,3% alcohol and is very well balanced. I like it.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;What an intense aroma, given by the high alcohol content. It immediately rises to the nose and is accompanied by fresh and fruity notes. These include citrus, mainly orange here, and still nice vanilla, toffee, and honey. This is delicious and suits the cask strength.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste is again dominated by orange and vanilla. In addition, there is an intense pepper note, which fortunately does not drown out the actual taste.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish is not really surprising. It is wonderful long and warm and leaves the course to the stomach nicely. Together with the slight peat note, unusual for the Islands, a wonderful drop.&lt;/p&gt;&lt;p&gt;The Cask Strength Release No. 1 is something special for a Highland Park, which I always like anyway. This intensity has something special and also gives room to gain further flavours with a little water. The range is wide and so a gift for the friends of Highland Park. I gave it &lt;strong&gt;88/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenlivet 15 yo French Oak Reserve</title>
       <link>//localhost:1313/posts/2022/01/15/glenlivet-15-yo-french-oak-reserve/</link>
       <pubDate>Sat, 15 Jan 2022 22:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/01/15/glenlivet-15-yo-french-oak-reserve/</guid>
       <description>&lt;p&gt;Today I&amp;rsquo;m talking about a rather young malt in my collection. However, the &amp;ldquo;young&amp;rdquo; does not refer to its age, which is 15 years. But I bought it only last month. Today it&amp;rsquo;s about the &lt;strong&gt;Glenlivet 15 yo French Oak Reserve&lt;/strong&gt;. It was allowed to mature in French Limousin oak casks from the Dordogne and is one of the cheapest on the market.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;This is a pleasant and strong aroma, dominated by the beautiful scent of cedar wood. In the background, there are also fruity oranges and the flowers of springtime shrubs. Cashew nuts can still be found at the very back.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;On the palate, the Glenlivet really packs a punch, nice and strong. It is salty at the front of the tongue and very spicy towards the back. There is a strong dark cocoa of good quality on the way in, not your typical sweet drink for in between. This taste is easily accompanied by the equally strong taste of plum.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;If nose and taste have already been nicely served, the journey ends pleasantly long and nicely warm in the process. A wonderful finish.&lt;/p&gt;&lt;p&gt;All in all, it is a pleasant surprise for this price. I would have expected less, but I received a nice round package. And this has received &lt;strong&gt;82/100&lt;/strong&gt; points from me.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Highland Park Spirit of the Bear</title>
       <link>//localhost:1313/posts/2022/01/14/highland-park-spirit-of-the-bear/</link>
       <pubDate>Fri, 14 Jan 2022 22:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2022/01/14/highland-park-spirit-of-the-bear/</guid>
       <description>&lt;p&gt;In today&amp;rsquo;s Tasting Notes, I&amp;rsquo;m describing a special single malt. It is the &lt;strong&gt;Highland Park Spirit of the Bear&lt;/strong&gt;. But what makes it special for me? It&amp;rsquo;s not the age, the alcohol content or the price. It&amp;rsquo;s much more the place of purchase. It was in a duty free at Munich airport. Otherwise, the malt is not exactly special. Matured in a sherry cask and with 40 % alcohol, it comes without age and is quite cheap.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;In contrast to many other Highland Parks, the Spirit of the Bear has a very lively flavour. The nose is caressed by berries and a sea of flowers.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;This malt is also only slightly spicy on the palate. Light notes of salt and nutmeg form the prelude. They pass into nutmeg and end with sweet vanilla notes.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish of this whisky is only medium long but warm. It is pleasant without being scratchy and pleases with slightly smoky notes.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s not a special Highland Park, I&amp;rsquo;ve had and still have better ones in my collection. But at this price, it&amp;rsquo;s okay.  It scores &lt;strong&gt;61/100&lt;/strong&gt; points in my rating.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Bruichladdich Port Charlotte PC10 Tro Na Linntean</title>
       <link>//localhost:1313/posts/2021/12/25/bruichladdich-port-charlotte-pc10-tro-na-linntean/</link>
       <pubDate>Sat, 25 Dec 2021 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/12/25/bruichladdich-port-charlotte-pc10-tro-na-linntean/</guid>
       <description>&lt;p&gt;Sometimes there is something special. This Christmas it was the &lt;strong&gt;Bruichladdich Port Charlotte PC10 Tro Na Linntean&lt;/strong&gt;, which I got as a birthday present frommy family last year. It&amp;rsquo;s a 10-year-old Islay at 59.8%. the peat content is 40ppm. This Christmas I finally opened it.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;A very nice and strong aroma of lemon, barley malt, nuts, oak and maritime notes. Further in the background pineapple, honeydew melon and some peppermint. And as befits an Islay, peat and smoke are added.&lt;/p&gt;&lt;p&gt;With a little water, the peat and smoke decrease, but the aroma becomes increasingly fruity, almost sweet. Only a little salt in the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The variety of aromas is fully preserved in the flavour, although peat, smoke and spice are the main ingredients. Together they form a rounded mixture that becomesmore and more beautiful with each further approach.&lt;/p&gt;&lt;p&gt;The taste remains nicely spicy and tingling on the tongue with the water. But overall, it now becomes more nutty and chocolaty.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The strong warmth of the flavour lingers long and strong in the finish. So the connoisseur gets something out of this drop for a long time.&lt;/p&gt;&lt;p&gt;The finish is made even longer and more beautiful by the additional water. It lasts long after swallowing.&lt;/p&gt;&lt;p&gt;The bottle was limited to 6000 bottles, mine bears the number 1764. It is not exactly an everyday drop, but much more a nice strong one for those special days, especially in the cold season. Thanks to the cask strength, you can vary. I&amp;rsquo;m actually a fan of the pure malts, even with high alcohol content. And you can do that here. But with a little water it is even better. With &lt;strong&gt;93/100&lt;/strong&gt; points, it has earned a very good place with me.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ardbeg An Oa</title>
       <link>//localhost:1313/posts/2021/12/20/ardbeg-an-oa/</link>
       <pubDate>Mon, 20 Dec 2021 19:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/12/20/ardbeg-an-oa/</guid>
       <description>&lt;p&gt;The next malt, which I have had open for a long time, but have now systematically tasted again, is the &lt;strong&gt;Ardbeg An Oa&lt;/strong&gt;. It is a little sweeter than the well-known &lt;strong&gt;Ardbeg TEN&lt;/strong&gt;, as it is matured in PX sherry casks and new oak casks in addition to the bourbon casks. The blend at the end is already special. It has 46.6 %.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The nose of Ardbeg An Oa is greeted by damp wood and various fruity notes. Among these, orange and raspberry stand out. Toffee and a little salt are also present. The finish is made up of beautiful smoky notes.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The smokiness of the nose is immediately echoed in the taste, although here it is stronger. In addition, there is a little salt and plenty of pepper, which spreads a pleasant spiciness. Everything is rounded off by orange and a hint of chocolate.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish of the An Oa is nice and long, strong and spicy. There is also a long-lasting and gentle warmth.&lt;/p&gt;&lt;p&gt;Compared to the Ardbeg TEN, the An Oa is unexpectedly light and fruity, almost light. Only in the taste does the distillery come back, becoming strong, smoky and salty, which lasts until the end. Here the An Oa becomes a nice spicy Ardbeg. It receives &lt;strong&gt;78/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glenrothes Halloween Edition 13 yo 2019</title>
       <link>//localhost:1313/posts/2021/12/18/glenrothes-halloween-edition-13-yo-2019/</link>
       <pubDate>Sat, 18 Dec 2021 18:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/12/18/glenrothes-halloween-edition-13-yo-2019/</guid>
       <description>&lt;p&gt;And again, new tasting notes for my single malt collection, today the &lt;strong&gt;Glenrothes Halloween Edition 13 yo 2019&lt;/strong&gt;. After that, more will follow at a faster pace, as I&amp;rsquo;m formulating the keyword notes in my database. After that comes another change, but more on that in the conclusion.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The nose of the Glenrothes is surprising. As always, it contains vanilla and orange, plus floral notes. But the traces of smoke, salt and wet oak are exciting. This is not usually found so strong in Glenrothes.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;With the taste, the surprise takes full effect and it becomes clear why this malt is the Halloween Edition. It contains an unusual amount of smoke and ash for a Speyside. In addition, this whisky tastes of very strong dark chocolate with 99%. Peppery notes and the sweetness of dried fruit round off the taste.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish of the Glenrothes is also almost like an Islay. It is strong, very warm and smoky. It can be felt for a long time. But the creamy notes are still nice, as one is used to from the regular Glenrothes.&lt;/p&gt;&lt;p&gt;All in all, it is a surprising Glenrothes, its name fits. The friend of this distillery can also treat himself to the Halloween Edition, it simply fits.&lt;/p&gt;&lt;p&gt;The innovation mentioned above will be the rating. Until now, it was a simple score between 0 and 10, but it sometimes seemed too rough to me. So I have changed my database - not all the values yet, just the system - and now I give the nose, taste, finish and the overall expectation a score between 0 and 25. The overall score will therefore be between 0 and 100, although it will probably be the upper third in many cases. In the case of the &lt;strong&gt;GlenrothesHalloween Edition 13 yo 2019&lt;/strong&gt;, it is &lt;strong&gt;79/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Talisker 10 yo</title>
       <link>//localhost:1313/posts/2021/12/17/talisker-10-yo/</link>
       <pubDate>Fri, 17 Dec 2021 18:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/12/17/talisker-10-yo/</guid>
       <description>&lt;p&gt;My whisky today was the young &lt;strong&gt;Talisker 10 yo&lt;/strong&gt;. As a Nordic malt from the Islands, it has its own taste, not comparable to the Speysides but also not like the Islays.  It is a strong and beautiful drop with 45.8%.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The aroma of the nose and wonderfully strong. At first it is salty and slightly smoky. Then there is some seawater and even a bit of the aroma of lemon in the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;The taste is sweet but also a little smoky. There was also some barley malt and dry fruits. Last but not least, there was an intense pepper note, but not too much.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;As it should be, the malt was nice and warming on the finish. It is intense and lingers for a long time. Again, the peppery notes of the flavour are found at the end.&lt;/p&gt;&lt;p&gt;This 10 year old doesn&amp;rsquo;t hold a candle to the 18 year old or even the 25 year old. But it is tasty, balanced and strong. And so it gets &lt;strong&gt;73/100&lt;/strong&gt; years points from me.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Bowmore 15 yo</title>
       <link>//localhost:1313/posts/2021/12/01/bowmore-15-yo/</link>
       <pubDate>Wed, 01 Dec 2021 18:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/12/01/bowmore-15-yo/</guid>
       <description>&lt;p&gt;Some time ago I already had the &lt;strong&gt;Bowmore No. 1&lt;/strong&gt; as a small addition to a &lt;strong&gt;Bowmore 12 yo&lt;/strong&gt;. And it was also with this 15-year-old, but as a result will still find his in my collection. It pleases with its post-maturationin &lt;em&gt;Oloroso Sherry&lt;/em&gt; casks and its price is really fair.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Bowmore 15 yo pleases the nose with very pleasant salty sea notes, which make the location of the distillery clear. A nice freshness, plus some smoke from the houses near the coast are reflected in the aroma. Everything isrounded off by the beautiful notes of sherry.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;On the palate, the Bowmore surprises with a nice sweetness on the tip of the tongue. This continues to be accompanied by smoke and, in this case, a strong sherry. But the oak of the barrels can also be found. Pungency and spice, onthe other hand, are only slight.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;Even in the finish, this whisky is wonderfully pleasantly smoky with nice sherry notes - all nicely fitting. There is also some sweetness as well as the oak of the cask again. This pleases.&lt;/p&gt;&lt;p&gt;All in all, I really liked this single malt, I give it an &lt;strong&gt;85/100&lt;/strong&gt; points. And since I had just emptied a few bottles again, I now have room in my cupboard. There I strike again at the next opportunity.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Glengoyne 18 yo</title>
       <link>//localhost:1313/posts/2021/11/18/glengoyne-18-yo/</link>
       <pubDate>Thu, 18 Nov 2021 21:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/11/18/glengoyne-18-yo/</guid>
       <description>&lt;p&gt;A malt that is already in my collection since February 2019 and was opened only now, is the &lt;strong&gt;Glengoyne 18 yo&lt;/strong&gt; matured in sherry casks.  I bought it blind on sale at the time, but I already knew the 15yo. Now I was pleasantly surprised by this wonderful natural colored Highland.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;Your nose immediately will notice its sherry, a fruity mix of dark fruits, sort of like blood oranges or raisins. And yet it&amp;rsquo;s sweet, kind of like dark rock candy. It also has light vanilla notes, very pleasant.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;Here the Glengoyne was then very nice and strong, warm and with some spiciness. The sherry asserts itself again, with its notes of malt, fruit and strong dark chocolate. A pleasant complexity for the evening.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;On the finish, this whisky retains its warmth. Complex and persistent, but not too overpowering. This pleases.&lt;/p&gt;&lt;p&gt;All in all, Glengoyne has succeeded in creating a nice and reasonably priced single malt with this 18 year old. It is certainly not a high end, but it is worth its price and the connoisseur receives a round drop for beautiful autumn evenings. With me, this malt has received &lt;strong&gt;84/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Bowmore No. 1</title>
       <link>//localhost:1313/posts/2021/11/17/bowmore-no.-1/</link>
       <pubDate>Wed, 17 Nov 2021 21:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/11/17/bowmore-no.-1/</guid>
       <description>&lt;p&gt;I didn&amp;rsquo;t have the &lt;strong&gt;Bowmore No. 1&lt;/strong&gt; in a big bottle, but only as a small 50 ml addition to the &lt;strong&gt;Bowmore 12 yo&lt;/strong&gt;. A good size for tasting unknown drops. So is this simple malt, matured only in first fill bourbon casks.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Bowmore surprises with its very light aroma for an Islay. It is almost sweet, with notes of vanilla. There is also a damp, slightly earthy spring meadow.  The small amount of smoke surprised me.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;This is where the Bowmore turns back into an Islay after all, with strong smoke and spice coating the tongue. There&amp;rsquo;s also oak, nuts and nice dark orange-chocolate.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;Here the malt has a warm and smooth but lingering finish. The sweetness of the nose comes back and is accompanied by citrus notes.&lt;/p&gt;&lt;p&gt;Overall, &lt;strong&gt;Bowmore No. 1&lt;/strong&gt; is a smooth and not very spectacular single malt. It is okay, but nothing more. It scored &lt;strong&gt;66/100&lt;/strong&gt; for me. Bowmore, for example, has a better whisky in its portfolio with the 15 yo.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Bruichladdich Islay Barlay 2009</title>
       <link>//localhost:1313/posts/2021/11/15/bruichladdich-islay-barlay-2009/</link>
       <pubDate>Mon, 15 Nov 2021 21:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/11/15/bruichladdich-islay-barlay-2009/</guid>
       <description>&lt;p&gt;With the opening of the current bottle, I have decided to publish my tasting notes for each newly opened bottle. As background for you the info that as a long time single malt friend I always have about 50 bottles at home. These come from different regions, so I can always choose nicely. On the one hand I have about 35 closed bottles in the cupboard, on the other hand up to 15 open bottles in a nice box. This has whisky as a print motif. And whenever I run out of a bottle, I open one from the cupboard and, if the opportunity arises, I treat myself to a new one for my collection. In the meantime, I have built up a nice collection of tasting notes. But now I would like to write down the latest ones here. Today I&amp;rsquo;m starting with the &lt;strong&gt;Bruichladdich Islay Barlay 2009&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I have had the bottle since 17.04.2018. It has been waiting to open for that long. It is the 2009 bottling, which is based on barley varieties Publican and Oxbridge. The malt, thus matured exclusively in bourbon casks, as 50%.&lt;/p&gt;&lt;h3 id=&#34;nose&#34;&gt;Nose&lt;/h3&gt;&lt;p&gt;The Bruichladdich has surprisingly sweet notes, surprisingly.  On the one hand this is the barley, but on the other hand there are also nice notes of orange, very fresh. There is also quite a bit of tobacco in the background.&lt;/p&gt;&lt;h3 id=&#34;taste&#34;&gt;Taste&lt;/h3&gt;&lt;p&gt;Here the tongue is immediately hit by a pinch of salt, then real smoke and lovely dark chocolate. In the background there is some nuttiness and light florals, paired with some spiciness. It all lingers very nicely on the tongue for a long time.&lt;/p&gt;&lt;h3 id=&#34;finish&#34;&gt;Finish&lt;/h3&gt;&lt;p&gt;The finish is wonderfully warm and long lasting. At the same time it is very nice and smooth, without any spiciness.&lt;/p&gt;&lt;p&gt;With the second glass, the Bruichladdich becomes rounder and warmer, a beautiful malt without imposing itself with its percentage. For its price, a nice drop. In my rating, it has &lt;strong&gt;72/100&lt;/strong&gt; points.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Migrated Go Actor and Go Wait</title>
       <link>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</link>
       <pubDate>Wed, 08 Sep 2021 21:11:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/09/08/migrated-go-actor-and-go-wait/</guid>
       <description>&lt;p&gt;As described a few days ago, I am migrating individual packages of the Tideland libraries to own repositories. I’ve described my motivation for this before. In the meantime, two more packages have been migrated to the main level: &lt;strong&gt;Tideland Go Actor&lt;/strong&gt; and &lt;strong&gt;Tideland Go Wait&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The package &lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/actor&#34;&gt;Tideland Go Actor&lt;/a&gt; pursues the idea to realize concurrency in Go not only via CSP, but with the &lt;strong&gt;Actor Model&lt;/strong&gt;. It picks up the concept of the Erlang/OTP module &lt;code&gt;gen_server&lt;/code&gt;. There data is sent synchronously or asynchronously to the process, here processed serialized and then eventually responses are sent back to the sender. In the Go package &lt;code&gt;actor&lt;/code&gt;, however, closures are processed serialized by the goroutine. From the developer&amp;rsquo;s point of view, the business logic and the use of concurrency thus remain closer together and more transparent.&lt;/p&gt;&lt;p&gt;Sometimes there are situations where a condition has to be checked, but not only with a simple &lt;code&gt;if&lt;/code&gt; statement. It is  much more necessary to repeat these checks until the desired condition or a knockout condition has occurred. The latter can be a termination from outside, the reaching of a maximum number of checks, a timeout or a deadline. Also the test can say that it makes no sense to continue testing. It may be important to define the frequency of the tests, to let them flutter to avoid collisions, or an own individual and dynamic timing of the tests. All this is offered by the &lt;a href=&#34;https://pkg.go.dev/tideland.dev/go/wait&#34;&gt;Tideland Go Wait&lt;/a&gt; package.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Make it easier to find</title>
       <link>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</link>
       <pubDate>Sun, 29 Aug 2021 13:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/08/29/make-it-easier-to-find/</guid>
       <description>&lt;p&gt;A look at the &lt;a href=&#34;https://github.com/tideland/&#34;&gt;Tideland Go repositories&lt;/a&gt; shows that these today are libraries for individual topics with various packages included. One problem with this form of organization is that these packages are difficult to find. At the same time, their individual histories and their versions are tied to those of the entire library. This must be improved.&lt;/p&gt;&lt;p&gt;Therefore, the reconstruction of these projects has now begun. The packages from the repositories move to the main level and become independent projects. A first example is now &lt;a href=&#34;https://github.com/tideland/go-uuid&#34;&gt;Tideland Go UUID&lt;/a&gt;. The package implements the generation of the versions v1, v3, v4, and v5. v2 will follow, as well as v6, v7, and v8 when the corresponding &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format&#34;&gt;draft&lt;/a&gt; is approved.&lt;/p&gt;&lt;p&gt;In which order it goes on then I must see then times. I am open for suggestions depending upon need. At the same time the new release of the &lt;a href=&#34;https://github.com/tideland/go-cells&#34;&gt;Tideland Go Cells&lt;/a&gt; will be prepared. The architecture has been streamlined and I would like to create a nice example for the application.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tideland Go Audit v0.5.0</title>
       <link>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</link>
       <pubDate>Thu, 20 May 2021 22:25:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/05/20/tideland-go-audit-v0.5.0/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve mentioned before that I&amp;rsquo;m currently reorganize my &lt;strong&gt;Tideland Go Libraries&lt;/strong&gt; - once again. I&amp;rsquo;m sorry for it and it will be interesting just for those who want to participate in development. The import into your own projects will stay the same.&lt;/p&gt;&lt;p&gt;This time it&amp;rsquo;s about the &lt;strong&gt;Tideland Go Audit&lt;/strong&gt; library, I&amp;rsquo;ve just released the new &lt;strong&gt;v0.5.0&lt;/strong&gt;. It&amp;rsquo;s a well approved and robust library containing helpful packages for testing. So the update only contains a few changes.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The main package &lt;code&gt;asserts&lt;/code&gt; has been extended by the additional assertions &lt;code&gt;NotOK()&lt;/code&gt; and &lt;code&gt;AnyError()&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;In case of asserting tests and using &lt;code&gt;Failable&lt;/code&gt; which like &lt;code&gt;testing.T&lt;/code&gt; does define &lt;code&gt;Logf()&lt;/code&gt; and &lt;code&gt;Errorf()&lt;/code&gt; their output is more compatible with CI environments.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;generators&lt;/code&gt; package has been extended by a &lt;code&gt;OneOf()&lt;/code&gt; function returning anyone of the given variadic parameters randomly.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In total the &lt;strong&gt;Tideland Go Audit&lt;/strong&gt; library helps you to test your projects in multiple ways.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;asserts&lt;/code&gt; contains many descriptive assertions not only usable for unit tests.&lt;/li&gt;&lt;li&gt;&lt;code&gt;capture&lt;/code&gt; helps capturing &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;strerr&lt;/code&gt; for tests.&lt;/li&gt;&lt;li&gt;&lt;code&gt;environments&lt;/code&gt; simplifies setting of environment variable and creation of temporary directories. It also can run a small web server for tests.&lt;/li&gt;&lt;li&gt;&lt;code&gt;generators&lt;/code&gt; contains generating test data in many ways. It can be randomly or fixed for repeatability.&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>I&#39;m off then</title>
       <link>//localhost:1313/posts/2021/01/10/im-off-then/</link>
       <pubDate>Sun, 10 Jan 2021 19:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2021/01/10/im-off-then/</guid>
       <description>&lt;p&gt;The Facebook corporation was a thorn in my side early on with its handling of personal data for advertising purposes. On top of that, Facebook itself showed me how difficult it is to keep conversations in check. That&amp;rsquo;s why I deleted my Facebook account a while ago. It was the same with Instagram as another service of the Facebook group.&lt;/p&gt;&lt;p&gt;As a messenger, I have been using WhatsApp for a long time. They were independent in the beginning, but then Facebook bought them. That made my ears prick up. However, I still had too many contacts on WhatsApp and didn&amp;rsquo;t have a good alternative. They already existed, but my own contacts were not there.&lt;/p&gt;&lt;p&gt;Of the available alternatives, I liked &lt;a href=&#34;https://www.signal.org&#34;&gt;Signal&lt;/a&gt; the best. The open business model, the development as &lt;a href=&#34;https://github.com/signalapp&#34;&gt;open source&lt;/a&gt;, the encryption. So I started early to motivate friends to use Signal. And I soon saw other contacts on Signal as well. It quickly became my main messenger.&lt;/p&gt;&lt;p&gt;But WhatsApp was still running in the background, some contacts and groups were only there. For that, I already adjusted the security settings. Nevertheless, I was always shocked by the data the app sends to the company. And now Facebook has gone too far. They are changing the terms and conditions on 8 February and making it even clearer what data is exchanged with other services. That&amp;rsquo;s not for me.&lt;/p&gt;&lt;p&gt;With that, I&amp;rsquo;m off, I&amp;rsquo;ve deleted my account. However, you can still find me on Signal.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Working from home</title>
       <link>//localhost:1313/posts/2020/03/23/working-from-home/</link>
       <pubDate>Mon, 23 Mar 2020 22:15:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2020/03/23/working-from-home/</guid>
       <description>&lt;p&gt;Interestingly I already wanted to write about working from home already before the current crisis. I had the luck to start with it in 2011. I then began working for &lt;a href=&#34;https://canonical.com/&#34;&gt;Canonical&lt;/a&gt;, a world-wide distributed company. My direct colleagues had been spread from New Zealand and Australia via several locations in Europe to North- and South-America. A fantastic feeling. Actually I&amp;rsquo;m working for &lt;a href=&#34;https://www.loodse.com/&#34;&gt;Loodse&lt;/a&gt;, not as large but 100% remote too. And I enjoy working with all my different colleagues.&lt;/p&gt;&lt;p&gt;But right now the motivation for many is a different one. It&amp;rsquo;s the virus crisis which forces people to stay home and to work there. Not all jobs allow to do so, but IT jobs like mine or many other typical office jobs do. So this possibly is a chance to establish remote work even more. Until today many executive boards have been too skeptical about it.&lt;/p&gt;&lt;p&gt;Why do I appreciate remote work so much? It&amp;rsquo;s being close to the family, having a self designed office, quiet and in my case with self-chosen hardware. Additionally I&amp;rsquo;m avoiding the daily commuting. Here I multiple times had a distance of one hour, 10 hours lost time per week, not talking about the additional cost. So useless and dumb. Beside that I also like the freedom regarding the time or the working place, I will write more about it later. And a special benefit is the feeling. Your team isn&amp;rsquo;t determined by the location. It&amp;rsquo;s determined by the specialization of the people, their knowledge, their interests. And as mentioned before you may have international colleagues you&amp;rsquo;re working with each day.&lt;/p&gt;&lt;h3 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h3&gt;&lt;p&gt;One interesting topic is the infrastructure. Many companies do have their own data center. So they need enough network capacity and the technology to enter it from outside. VPNs and terminal servers are one way. The other one chosen by many IT startups is to use external services like Google Apps. And there are a lot available for office, HR and recruiting, sales, customer service, travel booking and cost management, documentation, and communication. And for development teams there are tools for code management, code review, and CI. So you can avoid an own central infrastructure.&lt;/p&gt;&lt;p&gt;But still the employees need their hardware. Distribution of central managed computers and mobile phones is one way. Another one is supporting people in buying their own computer or using their private ones for the job too. We all know that people have individual preferences. And it is fine as long as those match to the environment.&lt;/p&gt;&lt;h3 id=&#34;processes&#34;&gt;Processes&lt;/h3&gt;&lt;p&gt;Surely communication is more simple when sitting in one room or you just have to walk around the corner. But there are possibilities. You can establish instant messaging, group chats in channels, or individual and group video calls. When your team is spread over multiple countries and time zones you&amp;rsquo;ve got to take care regarding appointments. 3pm is not the same everywhere, especially in the time of switching between standard time and DST. So it&amp;rsquo;s best to plan with UTC as fixed time zone. And take a look at bank holidays of invited members. Sounds difficult? Maybe a bit more inconvenient but handable, just care for it.&lt;/p&gt;&lt;p&gt;Also when having your video group calls, unique as well as regular ones per day or week, then try to make them short. It&amp;rsquo;s difficult to participate in long video discussions, especially when a discussion moves away from your scope. So try to first cover the status exchange for all or the general discussions and then setup individual calls for smaller groups who need more discussion.&lt;/p&gt;&lt;p&gt;Another aspect of distribution is the sharing of information. Not all can always participate in the meetings and calls, follow all chats, or be part of detailed discussions about decisions. So always take notes and document ideas, concepts, and decisions. Here wikis are very simple and useful.&lt;/p&gt;&lt;h3 id=&#34;daily-routine&#34;&gt;Daily routine&lt;/h3&gt;&lt;p&gt;So far a quick overview over some of the business aspects. But there are also several individual ones. One of it is the daily routine. Sure you&amp;rsquo;ve got a lot of freedom when you&amp;rsquo;re working and if you do it in a leisure suit (or even less &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;). But it&amp;rsquo;s better to do it like in a regular office job. Chose your standard wake-up time in the morning, go to the bath, get dressed, have your breakfast, and start your job. Sure it may be different in your individual case, but at least try to find a standard way to start your day and then get into your &lt;strong&gt;work mode&lt;/strong&gt;. So you can focus and separate spare time and work. Also then your colleagues know when they can reach you best.&lt;/p&gt;&lt;p&gt;Beside your start the end is important too. Log your time and finish work. It&amp;rsquo;s important for your &lt;strong&gt;work-life balance&lt;/strong&gt;. Otherwise you quickly loose control, work too much, and loose your energy and motivation.&lt;/p&gt;&lt;h3 id=&#34;workplace&#34;&gt;Workplace&lt;/h3&gt;&lt;p&gt;As for the time you&amp;rsquo;ve got a lot of freedom to chose your workplace. Sure you may work on the couch in front of the TV. But you can imagine the problems here. It does not really help to concentrate on your tasks. Best is an extra room, your home office. Quite, with convenient furniture and, at least in my case, music. I&amp;rsquo;ve also bought a height-adjustable desktop at IKEA helping to work standing for some time each day. It doesn&amp;rsquo;t cost too much. If you don&amp;rsquo;t have an extra room, then try to find a silent edge. Before my office room I&amp;rsquo;ve worked in our walk-in closet on a home-made table. Other alternatives seen at many colleagues are for example sleeping rooms or little edges in the living room. And when the virus crises is over a co-working space is a very good alternative too. Here they provide infrastructure and you have got other people for daily smalltalk around you.&lt;/p&gt;&lt;h3 id=&#34;freedom&#34;&gt;Freedom&lt;/h3&gt;&lt;p&gt;Yes, I&amp;rsquo;ve said you should have your standard time and your standard location. But please also enjoy the freedom of working remotely. You can move or break your working time in case you need it, for example for visiting doctors, garages, or barbers, the quick shopping of bargains, or simply to have a break to enjoy the sun. It&amp;rsquo;s wonderful fuss-free.&lt;/p&gt;&lt;p&gt;And beside several changes in your working time you also can change your working place. In case you&amp;rsquo;ve got the opportunity you can work on the veranda. Or you can meet colleagues in a coffee shop to discuss topics or simply cultivate your contacts, once it&amp;rsquo;s possible again. It all increases the motivation working from home.&lt;/p&gt;&lt;h3 id=&#34;communication&#34;&gt;Communication&lt;/h3&gt;&lt;p&gt;While there are many benefits it&amp;rsquo;s important that working from home does not lead into isolation. Use your possibilities to contact the colleagues and enjoy talking about topics which are not related to your work. It&amp;rsquo;s like standing with a cup of coffee in the door of the next office room and talk to the colleagues there about movies, music, or hobbies. Only that it&amp;rsquo;s virtually and distributed. Instant messaging, text chats, and video calls help a lot.&lt;/p&gt;&lt;p&gt;When messaging or chatting please take a bit care on how and what you&amp;rsquo;re writing. You may know it from private chatting and social messaging. The people don&amp;rsquo;t get your facial expression or your voice. This easily can lead to a misunderstanding. So once a conversation gets unpleasant say sorry and try to rephrase it. Or ask for a quick video call, it helps. Typical team meetings, daily or weekly, should be using video calls too. No long time, just exchanging news or the current status of a process. It&amp;rsquo;s more simple than writing it. In case of special topics to discuss the concerned participants can continue in an extra call.&lt;/p&gt;&lt;p&gt;All meeting protocols and other results should be maintained online too. Here you can use tools like the Google Docs or similar, or a wiki. This way the information reaches all people of your team, regardless of location, time zone, or individual reasons for missing a meeting.&lt;/p&gt;&lt;p&gt;While I&amp;rsquo;m working our cat &lt;strong&gt;Flora&lt;/strong&gt; often sleeps in my office on the rack behind me. And from time to time she likes to jump on my lap or the desktop, especially when I&amp;rsquo;ve got a video call. But that&amp;rsquo;s never a problem, nobody cares. It&amp;rsquo;s the same when your partner or children rush in or the doorbell rings by the postman, also no problem. Just a quick sorry, mute the microphone, care for the interruption, and return to the meeting. Remote working people normally are very understandingly here, they know the situation.&lt;/p&gt;&lt;h3 id=&#34;real-life-meetings&#34;&gt;Real life meetings&lt;/h3&gt;&lt;p&gt;So only one part left, especially when the virus crisis is over and we can travel again. Remote companies should establish real life meetings from time to time. Those may be in smaller teams or sometimes with the whole company if possible. Even in pure remote companies it is very important to create a better &lt;strong&gt;team spirit&lt;/strong&gt;. This is hard to establish via video. In real life people meet from face to face, talk about much more than only work, have fun, enjoy good meals, and drink wine or beer. Events together like sightseeing tours can amplify this.&lt;/p&gt;&lt;p&gt;For German speaking people I also have got the slides of my talk about this topic on the OOP 2013 conference. You&amp;rsquo;ll find it on &lt;a href=&#34;https://www.slideshare.net/TheMue/oop2013-frank-muellerweltweiteentwicklungvonoss&#34;&gt;SlideShare&lt;/a&gt;. Translation should be simple.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Talks on GoDays 2020</title>
       <link>//localhost:1313/posts/2019/11/20/talks-on-godays-2020/</link>
       <pubDate>Wed, 20 Nov 2019 16:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/11/20/talks-on-godays-2020/</guid>
       <description>&lt;p&gt;In January 21 to 23, 2020 are the next &lt;a href=&#34;https://www.godays.io&#34;&gt;GoDays&lt;/a&gt; in Berlin, Germany. And I hope it will be a great conference for all Gophers again like it has been this year too.&lt;/p&gt;&lt;p&gt;While being a passive visitor last time I&amp;rsquo;ll be active with two slots this time:&lt;/p&gt;&lt;p&gt;First one will be a workshop from 9:00 am to 5:00 pm on 21st together with &lt;em&gt;Nico Schieder&lt;/em&gt; and &lt;em&gt;Indradhanush Gupta&lt;/em&gt;. We&amp;rsquo;ll introduce you in &lt;strong&gt;Kubernetes&lt;/strong&gt; as platform for own components, because it can do more than deploy and manage containers. And we&amp;rsquo;ll show you how to develop these Kubernetes Operators.&lt;/p&gt;&lt;p&gt;And second one will be a talk from 11:00 am to 11:35 am on 23rd about having &lt;em&gt;fun with functions&lt;/em&gt; in Go. The language provides multiple paradigms in a wonderful pragmatic way. And thankfully &lt;em&gt;Robert Griesemer&lt;/em&gt;, &lt;em&gt;Rob Pike&lt;/em&gt;, and &lt;em&gt;Ken Thompson&lt;/em&gt; gave functions the right meaning. They are powerful, they are elegant, and they provide fun.&lt;/p&gt;&lt;p&gt;I hope we&amp;rsquo;ll see there and you enjoy the whole conference and especially my slots.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Happy Birthday, little Gopher</title>
       <link>//localhost:1313/posts/2019/11/10/happy-birthday-little-gopher/</link>
       <pubDate>Sun, 10 Nov 2019 19:30:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/11/10/happy-birthday-little-gopher/</guid>
       <description>&lt;p&gt;Today we&amp;rsquo;re celebrating the birthday of our little gopher, Googles programming language &lt;strong&gt;Go&lt;/strong&gt; turns 10. A decade of growing and getting better every year without breaking the promise of source code compatibility. So the community grew to about two million developers world wide and we can find a pretty large number of projects developed in Go. Especially many projects of the &lt;strong&gt;Cloud Native Computing Foundation&lt;/strong&gt; are using Go for implementation, like Docker and Kubernetes, Etcd and Prometheus.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.golang.org/10years/gopher10th-small.jpg&#34; alt=&#34;Gophers 10th Birthday &#34;&gt;&lt;/p&gt;&lt;p&gt;When Go started in 2009 I immediately started to dive into it too. Reason has been my interest in concurrent languages. l already used &lt;strong&gt;Erlang/OTP&lt;/strong&gt; the years before and so quickly got the concepts of Go. Talks, articles, and a book followed, and since 2011 I&amp;rsquo;m using Go professionally. Cloud provisioning, a logistics application based on micro-services, Ethereum, and Kubernetes, Googles language always has been a good companion. And as you know you can find my private stuff labeled &lt;a href=&#34;https://github.com/tideland/&#34; title=&#34;Tideland&#34;&gt;Tideland&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For German readers I wrote a little news about the last decade for &lt;a href=&#34;https://www.heise.de/developer/meldung/Programmiersprache-Go-feiert-zehnten-Geburtstag-4583503.html&#34;&gt;Heise Developer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Happy birthday, little Gopher!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Video of my JAX 2019 talk about Go</title>
       <link>//localhost:1313/posts/2019/08/29/video-of-my-jax-2019-talk-about-go/</link>
       <pubDate>Thu, 29 Aug 2019 22:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/08/29/video-of-my-jax-2019-talk-about-go/</guid>
       <description>&lt;p&gt;The &lt;strong&gt;JAX conference&lt;/strong&gt; typically focusses on Java technologies, the J of the name already shows it. But over the last years it opened more and more for other languages or external infrastructure technologies influencing the system architecture for solutions.&lt;/p&gt;&lt;p&gt;And so this year in May I had the chance to give an introduction into &lt;strong&gt;Google Go&lt;/strong&gt; as an alternative programming language. The slides can be found at &lt;a href=&#34;https://www.slideshare.net/TheMue/ein-gopher-im-netz&#34;&gt;SlideShare&lt;/a&gt; as usual. But additionally the organizers recorded the one hour talk on video. It&amp;rsquo;s in German and can be found at &lt;a href=&#34;https://youtu.be/bGL7bylm550&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Enjoy it.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Enjoy functions</title>
       <link>//localhost:1313/posts/2019/05/16/enjoy-functions/</link>
       <pubDate>Thu, 16 May 2019 23:01:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/05/16/enjoy-functions/</guid>
       <description>&lt;p&gt;What shall be special when working with &lt;strong&gt;functions&lt;/strong&gt;? They are part of software development almost since beginning, there&amp;rsquo;s even the paradigm of functional programming. So what&amp;rsquo;s special with functions in &lt;strong&gt;Go&lt;/strong&gt;? Simple answer: nothing. But true to the motto of the language the work with functions and their relatives, the methods, is very pragmatic. And so they get parts of elegant solutions.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s start with quite simple functions. They can be small, having none, one, more or a variable number of parameters. Almost the same applies for the return values. There can be none, one, or more. But no variable number. In this case you would have to return a slice of the wanted type.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VerySimple&lt;/span&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TotalLen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the first function is simple and closed, without parameters and return values, the second one takes none to an unlimited number of &lt;code&gt;string&lt;/code&gt; values as parameters. It shall sum up all lengths of all strings. But it also shall return an error in case of an empty string. So here will be returned two values – the counted length and a possible error which may be &lt;code&gt;nil&lt;/code&gt;. The convention to return errors as single or last values can be found all over the standard library.&lt;/p&gt;&lt;p&gt;These two function aren&amp;rsquo;t surprising yet. But it&amp;rsquo;s nice that functions, or to become more precise the signatures of functions, are &lt;em&gt;only&lt;/em&gt; types. So we easily can declare an own function type.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FilterFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And where we use this type its implementation can be exchanged easily.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;isOK&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FilterFunc&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isOK&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when calling &lt;code&gt;Filter()&lt;/code&gt; we can pass individual filter functions. As example when wanting to filter out all strings longer than 20 characters it&amp;rsquo;s quite simple.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case an anonymous and locally defined function is passed. Thankfully Go is very flexible here. It only cares for the signature of the function. So even regular functions defined in the same or a different package can be passed as argument.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// MaxTwenty in package foo.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MaxTwenty&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Filter in package bar.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxTwenty&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see we only pass the identifier of the function and don&amp;rsquo;t call it. A direct call would need the argument and return its result as argument for &lt;code&gt;Filter()&lt;/code&gt;, which won&amp;rsquo;t compile. By only passing the identifier the filter instead knows which function it shall user for &lt;code&gt;isOK&lt;/code&gt;. The compiler passes only the reference to the function.&lt;/p&gt;&lt;p&gt;But functions may not only be arguments, they also can be returned by functions. What&amp;rsquo;s nice here is that the returned function has access to all higher-level variables. These may be the parameters of the constructing functions or calculated variables inside of it. This way closures are built.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MakeLenFilter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;FilterFunc&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MakeLenFilter&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we now&amp;rsquo;ve got a function that creates and returns an anonymous function and a function that receives this function as argument. This type of higher-order functions is well known since a long time. And Go has integrated them in a simple and pragmatic way, with no special syntax as many other languages are doing it.&lt;/p&gt;&lt;p&gt;As mentioned above methods are nothing else than functions. Their receiver is only a different kind of reference and they have full access to it. In case of a structure they can use all fields as parameters for their work. But it don&amp;rsquo;t always have to be complex structures. Sometimes a simple value is enough, as in the example above the length of the strings to filter would be a good one. So we simply can define a type derived from the builtin &lt;code&gt;int&lt;/code&gt;. This now gets a method with the same signature as the filter function. That now can use the integer value as parameter for its work which makes the filter flexible.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LengthFilter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LengthFilter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;IsOK&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LengthFilter&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsOK&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;some-examples&#34;&gt;Some examples&lt;/h2&gt;&lt;p&gt;The shown &lt;code&gt;Filter()&lt;/code&gt; function for a set of data, here a slice of strings, is a well known member of a family of functions with functions as parameter. This family also contains &lt;code&gt;Map()&lt;/code&gt; and &lt;code&gt;Aggregate()&lt;/code&gt;. The first one for example could expect a &lt;code&gt;func(string) string&lt;/code&gt; for the conversion of all input strings into upper or lower cases. Others could cut or pad for a unique length.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MapFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MapFunc&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ToUpper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Input and output of &lt;code&gt;Filter()&lt;/code&gt; and &lt;code&gt;Map()&lt;/code&gt; are slices of the same type. So you can nest them easily.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;comDomains&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;emails&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtractDomain&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;MakeDomainFilter&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com&amp;#34;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Surely you also can create &lt;code&gt;Map()&lt;/code&gt; functions with different types for input and output. So for example from string to integer to map from strings to lengths or checksums. In case of &lt;code&gt;Aggregate()&lt;/code&gt; the task is the reduction of a set of values to one.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AggregateFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aggregate&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;aggregate&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AggregateFunc&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;initial&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;aggregate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aggregate&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These kinds of functions for different types and different already provided filter, mapping, and aggregation functions build a useful package. Sadly today it&amp;rsquo;s sometimes a bit inconvenient due to the static typing in Go. You need multiple implementation for the different function signatures. Here dynamic typed languages have an advantage. But with the possibly upcoming generics in Go this may change.&lt;/p&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;&lt;p&gt;Another nice example is the configuration of structured types. Here often the parameter fields should be private, should have default values, and should mostly only be set during instantiation. So one way is a constructor with all parameters, but here I need an explicit setting. Or I create a number of different constructors which gets horrific in case of an increasing number of different options.&lt;/p&gt;&lt;p&gt;So here we use functions for setting options, functions for the creation of those option functions, and a constructor function taking a variadic number of option functions. Sounds a bit strange? No problem, it will get clearer soon. For example we create a type &lt;code&gt;Pinger&lt;/code&gt; in the package &lt;code&gt;pinger&lt;/code&gt;. This type shall ping an IP address inside a goroutine and in case of a number of missing replies it calls a callback.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Callback&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IP&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;interval&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tolerance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Callback&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;shallLog&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the options we now define the type &lt;code&gt;Option&lt;/code&gt; as &lt;code&gt;type Option func(*Pinger)&lt;/code&gt;. Implementations of this one will be passed to the constructor. After the setting of the default values the options will be applied to the created pinger. Afterwards the goroutine will be started and the instance returned.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;:        &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IPv4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;interval&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;tolerance&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cbp&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pinging %v failed\n&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;cbp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;shallLog&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;option&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;backend&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far it&amp;rsquo;s pretty clear, the option functions may modify the pinger. But how do we get those functions? This is the task of different ones with more speaking names based on the pinger parameter. They&amp;rsquo;ve got own parameters they validate before setting the value inside the pinger. Incase of groups of parameters the functions my have them all. Or in case of boolean options two functions without parameters may be even better readable.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IP&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Interval&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;interval&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NoLogging&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shallLog&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the pinger can be created in many ways. Without any option by using the default values, with some of the options, or with all of them. And the more options a type has got the more advantages this way has.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IPv4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IPv4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Interval&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Minute&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Tolerance&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Callback&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pinger&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;failures&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pinger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NoLogging&lt;/span&gt;(),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;actor&#34;&gt;Actor&lt;/h3&gt;&lt;p&gt;Another wonderful feature is that functions as regular types can be sent via channels too. This can be useful for concurrent types which shall execute only one modifying action at a time. Languages like Erlang/OTP doing this following to the actor model. Here messages are sent into a message box and they will be processed sequentially. Same is simply possible in Go with the processing of functions sent to a loop running inside a goroutine.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt;: make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;backend&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;backend&lt;/span&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{})&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        close(&lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the wanted functions with changes or requests of fields can be implemented. Here the method &lt;code&gt;do()&lt;/code&gt; ensures the synchronization of the calls. It could be even better implemented with checking if the &lt;code&gt;tasks&lt;/code&gt; channel is already closed or with an optional timeout when waiting for the response.&lt;/p&gt;&lt;p&gt;All here sent tasks will be processed sequentially and concurrent access to fields of the actor will be avoided.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;SetA&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;do&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyActor&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;IsPositive&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;positive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;do&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;positive&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ma&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;positive&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;state-machine&#34;&gt;State machine&lt;/h3&gt;&lt;p&gt;There are many more helpful use cases for functions as parameter, as return value or as field of a  &lt;code&gt;struct&lt;/code&gt;. So easily a state machine can be implemented, where all event processing handler functions do have the same signature and return the handler function for the next event. Depending on the state this could be the same or a different one. When returning &lt;code&gt;nil&lt;/code&gt; the end of the state machine is reached.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Based on this little core you now can implement the wanted event handlers. They evaluate the event, may change the fields of the state machine and return a reference to the following state.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Action&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;buttonPressed&amp;#34;&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;active&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;idle&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;active&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;StateMachine&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;outOfService&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;EventHandler&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Final variant I want to show is how functions as types can provide methods too. Take a look at the package &lt;code&gt;net/http&lt;/code&gt;. Here handler for web requests implement the interface &lt;code&gt;http.Handler&lt;/code&gt;. But sometimes you only want one simple function, no implementation of the interface. Here simply implement the function type &lt;code&gt;http.HandlerFunc&lt;/code&gt;. It only is a simple function signature like &lt;code&gt;Handler.ServeHTTP()&lt;/code&gt;. And it implements the interface itself with this method. Here the HTTP function is the receiver and will be called inside &lt;code&gt;ServerHTTP()&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These examples may give you an overview over the power of functions in Go and how seamless they work together with other functions and types. If as normal functions, as types, as parameters, as return values, or as fields of structs, with name or anonymous. They are an important part of the implementation of powerful, flexible, and good maintainable solutions.&lt;/p&gt;&lt;h2 id=&#34;some-useful-links&#34;&gt;Some useful links&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec#Function_types&#34;&gt;Function types&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec#Function_declarations&#34;&gt;Function declarations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec#Function_declarations&#34;&gt;Method declarations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec#Function_literals&#34;&gt;Function literals&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#functions&#34;&gt;Effective Go - Functions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/#HandlerFunc&#34;&gt;http.HandlerFunc&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Don’t be afraid of multiplexing</title>
       <link>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</link>
       <pubDate>Sat, 23 Mar 2019 22:50:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/03/23/dont-be-afraid-of-multiplexing/</guid>
       <description>&lt;p&gt;Pretty often you read questions about &lt;strong&gt;multiplexing&lt;/strong&gt; in &lt;strong&gt;Go&lt;/strong&gt; web application on Slack, StackOverflow, or Reddit. Sometimes they think about using libraries like &lt;code&gt;gorilla/mux&lt;/code&gt;, which is a powerful software, and its alternatives. Depending on individual requirements and constraints these may make sense, but for many cases the standard library or own little packages based on the standard library are more than enough. I&amp;rsquo;ll show the idea behind the Go &lt;code&gt;net/http&lt;/code&gt; package and how to build own solutions based on it.&lt;/p&gt;&lt;h2 id=&#34;processing-requests&#34;&gt;Processing requests&lt;/h2&gt;&lt;p&gt;The package &lt;code&gt;net/http&lt;/code&gt; provides a server which distributes incoming HTTP requests to processing functions in goroutines. The simplest variants are the functions &lt;code&gt;http.ListenAndServe()&lt;/code&gt; for HTTP and &lt;code&gt;http.ListenAndServeTLS()&lt;/code&gt; for HTTPS. Also there are &lt;code&gt;http.Serve()&lt;/code&gt; and &lt;code&gt;http.ServeTLS()&lt;/code&gt; which do work with individual instances of a &lt;code&gt;net.Listener&lt;/code&gt; and provide more flexibility in its configuration. Third way with a maximum of flexibility is the creation of an own instance of the &lt;code&gt;http.Server&lt;/code&gt; which is configurable by many parameters.&lt;/p&gt;&lt;p&gt;All three ways have in common that they need an implementation of the &lt;code&gt;http.Handler&lt;/code&gt; interface. It only defines one method,&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method is responsible to analyze the request &lt;code&gt;r&lt;/code&gt; and write the answer to the writer &lt;code&gt;w&lt;/code&gt;. Both types provide different fields and methods for this task.&lt;/p&gt;&lt;p&gt;A simple and convenient form of the interface is the &lt;code&gt;http.HandlerFunc&lt;/code&gt;. It is the simple function type&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the needed method is implemented quite simple by calling the receiver type. It&amp;rsquo;s nice in Go that function types can have methods too. So now a very simple server is done with only a few lines of code.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusOK&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The analysis of the path of a request and the distribution to according functions inside the handler is a bit inconvenient. For example this can be done via a &lt;code&gt;switch&lt;/code&gt; statement. But it&amp;rsquo;s no fun.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ShopAPI&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPrefix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/customers/&amp;#34;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;customersServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPrefix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/orders/&amp;#34;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ordersServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cannot handle request&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusNotFound&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This might be possible in case of very small APIs, but with growing number of paths this approach will become too static and unmaintainable. Additionally the example is deliberately kept simple. But with paths like &lt;code&gt;/posts/../api/customers/&lt;/code&gt; or &lt;code&gt;/api/customers&lt;/code&gt; without the trailing slash this way fails. So the path has to be preprocessed before the request can be handled. A more powerful multiplexing is needed.&lt;/p&gt;&lt;p&gt;Thankfully the &lt;code&gt;http&lt;/code&gt; package of Go provides a handler which acts as multiplexer, the &lt;code&gt;http.ServeMux&lt;/code&gt;. Here the &lt;code&gt;ServeHTTP()&lt;/code&gt; method analyses the request path, computes relative parts, and distributes the request to handlers registered by paths. Those may be absolute for individual resources or for all resources inside a path. The used paths may overlap, for example one handler for &lt;code&gt;/posts/&lt;/code&gt; and one for &lt;code&gt;/posts/images/&lt;/code&gt;. When a request contains the longer registered path its handler has the higher priority.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/posts/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewPostsHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/posts/images/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewPostImagesHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewAPIHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusNotFound&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As long as only the simple  &lt;code&gt;http.ListenAndServe()&lt;/code&gt; is used you don&amp;rsquo;t need an extra instance of the multiplexer. The package contains the global &lt;code&gt;DefaultServeMux&lt;/code&gt; and the handler can be registered via &lt;code&gt;http.Handle(&amp;quot;/api/&amp;quot;, NewAPIHandler())&lt;/code&gt;. When starting the server you only need to pass &lt;code&gt;nil&lt;/code&gt; as handler, so &lt;code&gt;http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;which-method-to-take&#34;&gt;Which method to take&lt;/h2&gt;&lt;p&gt;Beside the path of a request its HTTP method is important too. Here the Go packages provide nothing, a handler has to do evaluate the field &lt;code&gt;Request.Method&lt;/code&gt; manually. But by creating a small &lt;code&gt;MethodMux&lt;/code&gt; it&amp;rsquo;s no problem.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MethodMux&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handlers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodMux&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handlers&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodMux&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handlers&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cannot handle request&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusMethodNotAllowed&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in a RESTful API for a shop on base of the &lt;code&gt;DefaultServeMux&lt;/code&gt; individual handler and handler functions can be registered for individual HTTP methods.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMethodMux&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodPost&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewCustomerCreateHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewCustomerReadHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodPut&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewCustomerUpdateReplaceHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodPatch&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewCustomerUpdateModifyHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodDelete&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewCustomerDeleteHandler&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/customers/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;customerAPI&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For many APIs a better approach may be the usage of only one handler but with individual Go methods for the individual HTTP methods. Here a wrapper, a number of interfaces, and the &lt;em&gt;type assertion&lt;/em&gt; can help. First you need to define a small interface for each HTTP method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeGet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ServePost&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the wrapper evaluates inside its &lt;code&gt;ServeHTTP()&lt;/code&gt; method the HTTP method and checks if the given handler implements the matching interface.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MethodWrapper&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MethodWrapper&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;GetHandler&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeGet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodPost&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;PostHandler&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServePost&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the business logic can be distributed to the according methods if those are provided. Otherwise the &lt;code&gt;ServeHTTP()&lt;/code&gt; method of the handler itself can provide an error message or some kind of default handling. All fields and methods of the handler are shared between all method handle methods (&lt;em&gt;Why both share the same name, HTTP and Go?&lt;/em&gt;)&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shopAPI&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shopAPI&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeGet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shopAPI&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServePost&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shopAPI&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cannot handle shop request&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusMethodNotAllowed&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way the deployment will become one line of code.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/shop/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMethodWrapper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;NewShopAPI&lt;/span&gt;()))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once implemented the wrapper can be used for all handlers of the application.&lt;/p&gt;&lt;h2 id=&#34;with-security&#34;&gt;With security&lt;/h2&gt;&lt;p&gt;Another requirement for many web applications is the protection against unauthorized access. One well known technology is the &lt;a href=&#34;https://jwt.io/&#34;&gt;JSON Web Token&lt;/a&gt;. It contains via key secured a payload with standard and individual fields, named claims. Those are for example the user ID (&lt;code&gt;sub&lt;/code&gt; - subject), the time of issuing (&lt;code&gt;iat&lt;/code&gt; - issued at), the starting time of the token (&lt;code&gt;nbf&lt;/code&gt; - not before) and the expiration time (&lt;code&gt;exp&lt;/code&gt;). An application can add own claims, like roles or allowed paths for the individual user. Via different hashing technologies the JWT standard ensures that the payload hasn&amp;rsquo;t been changed.&lt;/p&gt;&lt;p&gt;The token for a user session has to be generated after the authentication and to be returned to the client. The client has to deliver it as header in the form &lt;code&gt;Authorization: Bearer &amp;lt;Token&amp;gt;&lt;/code&gt;  with each request. On server-side a security wrapper can read this header, check for consistency and validity, and let only pass authorized requests. Thankfully there are several supporting packages for JWT available.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthWrapper&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;authURL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;roles&lt;/span&gt;   []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewAuthWrapper&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;authURL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;roles&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthWrapper&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;authURL&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;authURL&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;roles&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;roles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthWrapper&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;aw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasValidToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Redirect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;authURL&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusUnauthorized&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;aw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isAllowed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access not allowed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusUnauthorized&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a request contains no token or is a delivered one expired a redirect to a URL for the login has to be done. Also an automatic extension if a token expires in a few minutes is a nice feature. There a many possible strategies, most important is the idea of the wrapping as part of the own toolbox.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;usersAPI&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewAuthWrapper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;NewMethodWrapper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;NewUsersAPI&lt;/span&gt;()), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;usersAPI&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With a trivial interface with only one method is this more simple and convenient possible as with complex interfaces and a huge configuration. Another strength of this approach is also the simple isolated testing of the business logic handlers without any infrastructure tasks. Here Go provides a very useful &lt;code&gt;httptest.Server&lt;/code&gt; as local test server in the package &lt;code&gt;net/http/httptest&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;what-about-restful-apis&#34;&gt;What about RESTful APIs&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;http.ServeMux&lt;/code&gt; is helpful when working with static paths. But delivering paths with flexible parts to the same handlers is no feature. In case of RESTful APIs individual identifiers are parts or the path the HTTP methods control what to do then. Examples are&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;/api/orders&lt;/code&gt; for adding a new order or retrieving a list of orders,&lt;/li&gt;&lt;li&gt;&lt;code&gt;/api/orders/{order-id}&lt;/code&gt; for retrieving, updating, or delete an order,&lt;/li&gt;&lt;li&gt;&lt;code&gt;/api/orders/{order-id}/items&lt;/code&gt; for a new order item or retrieving a list of items, and&lt;/li&gt;&lt;li&gt;&lt;code&gt;/api/orders/{order-id}/items/{item-id}&lt;/code&gt; retrieving, updating, and delete order item.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It would be nice if this could be done with only two handlers. An &lt;code&gt;OrdersAPI&lt;/code&gt; for the orders and an &lt;code&gt;OrdersItemsAPI&lt;/code&gt; for the order items. How can this be done elegantly?&lt;/p&gt;&lt;p&gt;With the &lt;code&gt;ServeMux&lt;/code&gt; all requests prefixed &lt;code&gt;/api/orders/&lt;/code&gt; can be assigned to one handler. This one has to process requests around orders and order items. A little helper function for the checking and retrieval of the order ID and the item index should be no problem. So the order ID can retrieved via &lt;code&gt;id, ok := GetPathElem(r, 3)&lt;/code&gt; very easily. Now only the question on how to distribute the request to the two handlers can be done is left. Once again a simple wrapper helps.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NestedWrapper&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;firstHandler&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;secondHandler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NestedWrapper&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;firstHandler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;secondHandler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid URL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusNotFound&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The handlers managed by this wrapper themselves can be wrapped by or use other wrappers, depending on their needs. Those can be the ones for the authorization, for the dispatching of the HTTP methods, or others.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ordersAPI&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewAuthWrapper&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;NewNestedWrapper&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMethodWrapper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;NewOrdersAPI&lt;/span&gt;()),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMethodWrapper&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;NewOrdersItemsAPI&lt;/span&gt;()),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dispatcher&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/orders/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ordersAPI&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Surely there are useful applications where the pros of using an existing library is bigger than the cons through complexity and dependencies. But this decision has to be evaluated very thoroughly. Go is designed for simplicity and composition, the basic ideas of Unix. And the package &lt;code&gt;net/http&lt;/code&gt; shows with a simple interface and the both types for request and response how own flexible toolboxes can easily be created with this philosophy.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Whisky tasting with OEC</title>
       <link>//localhost:1313/posts/2019/03/04/whisky-tasting-with-oec/</link>
       <pubDate>Mon, 04 Mar 2019 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/03/04/whisky-tasting-with-oec/</guid>
       <description>&lt;p&gt;As a friend of single malt whiskies I&amp;rsquo;m always happy to participate at tastings. This time I got an invitation by &lt;em&gt;Darrell&lt;/em&gt;, the organiser of the &lt;em&gt;Oldenburg English Club&lt;/em&gt;. And on last Thursday &lt;em&gt;Sandra&lt;/em&gt; and &lt;em&gt;Ulli&lt;/em&gt; of &lt;a href=&#34;https://www.malts4you.com/&#34;&gt;Malts4you&lt;/a&gt; conducted it in the &lt;a href=&#34;https://www.appeltje-oldenburg.de/&#34;&gt;Appeltje&lt;/a&gt;, a small and pretty café in the inner city of Oldenburg. They&amp;rsquo;ve been very friendly and offered some good finger food.&lt;/p&gt;&lt;p&gt;In the beginning &lt;em&gt;Ulli&lt;/em&gt; gave a little introduction into the procedure with the list of whiskies and the tasting cards where the tasted malts—or better there price—is noted. Afterwards he gave an overview over the different whiskies both offered. It has been a nice and special collection of Scottish and other malts, many of them special bottlings. Based on the descriptions and tips of other guests everybody then had the chance to choose. My malts had been&lt;/p&gt;&lt;h3 id=&#34;oban-the-nights-watch&#34;&gt;Oban &amp;ldquo;The Night&amp;rsquo;s Watch&amp;rdquo;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Nose: &lt;em&gt;Fruity with aromas of orange peel and cherries&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Taste: &lt;em&gt;Oak, caramel, some salt and spice&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Finish: &lt;em&gt;Caramel and some spice, not too long&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;bladnoch-adela-15-yo&#34;&gt;Bladnoch Adela 15 yo&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Nose: &lt;em&gt;Sweet and juicy, also some nuts and coffee&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Taste: &lt;em&gt;Chocolate, dried fruit, Peper and sherry&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Finish: &lt;em&gt;Sweet and warm&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;knockando-21-yo&#34;&gt;Knockando 21 yo&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Nose: &lt;em&gt;Sweet, malt and chocolate, some ginger, salt&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Taste: &lt;em&gt;Strong with cherry and vanilla, little notes of caramel&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Finish: &lt;em&gt;Warm, long, some spice and honey&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;bruichladdich-13-yo-cask-strength-637&#34;&gt;Bruichladdich 13 yo Cask Strength 63.7%&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Nose: &lt;em&gt;Hefty and dirty nose, like silty sand from the coast, also sherry and dark chocolate, some candy; with water also gooseberry&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Taste: &lt;em&gt;An explosion on the tip of the tongue, sandpaper on the back of the tongue, vinegar, like warm bitumen long sticking; with water less explosive&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Finish: &lt;em&gt;Long and strong, much later again rebelling&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;tobermory-20082018-9-yo-653&#34;&gt;Tobermory 2008/2018 9 yo 65,3%&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Nose: &lt;em&gt;Pure alcohol, wonderful  ripe fruits like plums and dates; with water some bitumen&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Taste: &lt;em&gt;Very  spicy, much salt on the tip on the tongue while a dry Lindt 99% chocolate on the back of the tongue; with water more hazelnut and lighter milk chocolate&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Finish: &lt;em&gt;Wonderful long, warm, and spicy&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Especially the Knockando, the Bruichladdich, and the Tobermory had been really good. But for the Bruichladdich you need the right mood, it&amp;rsquo;s quite hefty. My choice of the evening so has been the Tobermory as a wonderful cask strength, even if it is only just 9 years old. The next day I ordered one at &lt;em&gt;Sandra&lt;/em&gt; and &lt;em&gt;Ulli&lt;/em&gt;. Slàinte!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Change of top level domain to dev</title>
       <link>//localhost:1313/posts/2019/03/02/change-of-top-level-domain-to-dev/</link>
       <pubDate>Sat, 02 Mar 2019 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/03/02/change-of-top-level-domain-to-dev/</guid>
       <description>&lt;p&gt;On Feb 28th the top level domain &lt;strong&gt;.dev&lt;/strong&gt; has been available for all. So for me as a developer it&amp;rsquo;s the best possible TLD to get. One day later I reserved two different ones:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;themue.dev&lt;/strong&gt; as a replacement for my former personal domain &lt;strong&gt;themue.name&lt;/strong&gt; and&lt;/li&gt;&lt;li&gt;&lt;strong&gt;tideland.dev&lt;/strong&gt; as a replacement of all my different Tideland domains into one.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The personal domain is now changed, the Tideland domains will follow these days. Then I also have to change the new Go mono repository I&amp;rsquo;m migrating my packages to. They&amp;rsquo;llthen be importable like&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tideland.dev/go/together/loop&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tideland.dev/go/together/notifier&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hope you like these changes.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Restart of the blog</title>
       <link>//localhost:1313/posts/2019/01/26/restart-of-the-blog/</link>
       <pubDate>Sat, 26 Jan 2019 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2019/01/26/restart-of-the-blog/</guid>
       <description>&lt;p&gt;Those who visited my blog before will recognize that I deleted several – most – of my old blog entries. The reason has been my disaffection with the way I&amp;rsquo;ve done it before. The mix of the content and the long gaps between two entries did not feel good and attractive. So I had to think about how to change it, what my topics shall be.&lt;/p&gt;&lt;p&gt;I found two major topics. First one has to do with my job which is also my hobby. It&amp;rsquo;s about &lt;strong&gt;software engineering&lt;/strong&gt;. Here I like the whole bandwidth from gathering good requirements up to run good maintainable project or product. And there are so many interesting aspects inside of it, regarding the the architecture, the used technologies, the process, and the team management. This will be one block, e.g. by based on translations of my columns for a German magazine, articles, or experiences made in my job.&lt;/p&gt;&lt;p&gt;The second major topic  is interesting in general and today even more. It&amp;rsquo;s about &lt;strong&gt;politics&lt;/strong&gt; and its responsibilities for ecology, economy, and social communities worldwide. And surely how we as voters and members of our society are responsible for it too. Politics is not only passive, allowing to beef about decisions we don&amp;rsquo;t like. It&amp;rsquo;s about discussing with other voters, with influencing the parties, and with even get active inside an existing or a new party. We are all responsible for it.&lt;/p&gt;&lt;p&gt;Surely there will be more different topics too. There&amp;rsquo;s different stuff I&amp;rsquo;m interested in. But those entries have to be more than just &lt;em&gt;&amp;ldquo;I have been here.&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;I have done that.&amp;rdquo;&lt;/em&gt;. They have to be more about &lt;strong&gt;thoughts&lt;/strong&gt; and &lt;strong&gt;opinions&lt;/strong&gt;, possibly based on events with or without me.  We&amp;rsquo;ll see.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Open, not closed</title>
       <link>//localhost:1313/posts/2018/08/24/open-not-closed/</link>
       <pubDate>Fri, 24 Aug 2018 20:00:00 +0100</pubDate>
       
       <guid>//localhost:1313/posts/2018/08/24/open-not-closed/</guid>
       <description>&lt;p&gt;These days it happened again. This time it has been &lt;strong&gt;Twitter&lt;/strong&gt; which changed the services it provides and forced external applications to change due to changes of the API. So it more and more follows Facebook to become a propriatary system, closed and best without any external client. But there are definitely better clients than the original one, in my case it&amp;rsquo;s &lt;strong&gt;Tweetbot&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;This change made me thinking about all those closed systems today. I already mentioned Facebook and Twitter, but there are also WhatsApp, Instagram, SnapChat, Telegram, Slack, Skype, Meetup, and many more. To participate you need to install the according applications, register, and build your community there. Sometimes it&amp;rsquo;s bad, because you&amp;rsquo;re using the system &lt;strong&gt;Foo&lt;/strong&gt; while the group you would like to communicate and interact with is using system &lt;strong&gt;Bar&lt;/strong&gt;. But installing system &lt;strong&gt;Bar&lt;/strong&gt; for only this group doesn&amp;rsquo;t really work. Other people you know use system &lt;strong&gt;Bar&lt;/strong&gt; too and start interacting with you. And so after some time you have a number of apps and accounts - but still not all.&lt;/p&gt;&lt;p&gt;In the early times of the Internet the focus has been more on protocols and data formats. Mail with SMTP, POP3, and IMAP4, chat with the IRC Protocol, newsgroups with NNTP, the web with HTTP, file transfer via FTP, and more. All is fine documented in the RFCs you can find at the &lt;a href=&#34;https://tools.ietf.org/html/&#34;&gt;Internet Engineering Task Force (IETF)&lt;/a&gt;. And these standards allow the exchange of the according server and client applications in open and closed environments as well. Writing a mail with Apple Mail, sending it to a postfix server which transmits it to a Microsoft Exchange server where it is retrieved via Thunderbird - it works. Or how many different web browser access this site served via NGINX behind a proxy while others uses different technology stacks.&lt;/p&gt;&lt;p&gt;So my wish to the providers of services like mentioned above are &lt;strong&gt;open&lt;/strong&gt; standards to allow alternative free and commercial clients. And try to find ways how your services can interact. Why shouldn&amp;rsquo;t it be possible to use WhatsApp to chat with Telegram, Facebook, or Signal users? And for Twitter the hint that after the latest changes I&amp;rsquo;m evaluating &lt;strong&gt;Mastodon&lt;/strong&gt; as an alternative, it allows own clients and even running own instances. But I&amp;rsquo;m also willing to pay a monthly fee for Twitter if it provides the services I like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Open API&lt;/li&gt;&lt;li&gt;Timeline in strict chronological order of those I follow&lt;/li&gt;&lt;li&gt;No advertisement&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Facebook went the wrong way and deleting my account felt really good.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
